/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.0.9.0 (NJsonSchema v9.13.10.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, from as _observableFrom, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';
import { BaseClient } from './BaseClient';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable({
    providedIn: 'root'
})
export class AccountService extends BaseClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super();
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://192.168.252.113:5000";
    }

    isSignIn(): Observable<SwaggerResponse<FileResponse | null>> {
        let url_ = this.baseUrl + "/api/v1/Account/isSignIn";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processIsSignIn(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processIsSignIn(<any>response_);
                } catch (e) {
                    return <Observable<SwaggerResponse<FileResponse | null>>><any>_observableThrow(e);
                }
            } else
                return <Observable<SwaggerResponse<FileResponse | null>>><any>_observableThrow(response_);
        }));
    }

    protected processIsSignIn(response: HttpResponseBase): Observable<SwaggerResponse<FileResponse | null>> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf(new SwaggerResponse(status, _headers, { fileName: fileName, data: <any>responseBlob, status: status, headers: _headers }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<FileResponse | null>>(new SwaggerResponse(status, _headers, <any>null));
    }

    register(req: RegisterReq): Observable<SwaggerResponse<RespWapper | null>> {
        let url_ = this.baseUrl + "/api/v1/Account/register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(req);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processRegister(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRegister(<any>response_);
                } catch (e) {
                    return <Observable<SwaggerResponse<RespWapper | null>>><any>_observableThrow(e);
                }
            } else
                return <Observable<SwaggerResponse<RespWapper | null>>><any>_observableThrow(response_);
        }));
    }

    protected processRegister(response: HttpResponseBase): Observable<SwaggerResponse<RespWapper | null>> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RespWapper.fromJS(resultData200) : <any>null;
            return _observableOf(new SwaggerResponse(status, _headers, result200));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<RespWapper | null>>(new SwaggerResponse(status, _headers, <any>null));
    }

    emailConfrim(req: EmailConfirmReq): Observable<SwaggerResponse<RespWapperOfRegisterResp | null>> {
        let url_ = this.baseUrl + "/api/v1/Account/emailConfirm";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(req);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processEmailConfrim(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEmailConfrim(<any>response_);
                } catch (e) {
                    return <Observable<SwaggerResponse<RespWapperOfRegisterResp | null>>><any>_observableThrow(e);
                }
            } else
                return <Observable<SwaggerResponse<RespWapperOfRegisterResp | null>>><any>_observableThrow(response_);
        }));
    }

    protected processEmailConfrim(response: HttpResponseBase): Observable<SwaggerResponse<RespWapperOfRegisterResp | null>> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RespWapperOfRegisterResp.fromJS(resultData200) : <any>null;
            return _observableOf(new SwaggerResponse(status, _headers, result200));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<RespWapperOfRegisterResp | null>>(new SwaggerResponse(status, _headers, <any>null));
    }

    login(req: LoginReq): Observable<SwaggerResponse<RespWapper | null>> {
        let url_ = this.baseUrl + "/api/v1/Account/login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(req);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processLogin(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLogin(<any>response_);
                } catch (e) {
                    return <Observable<SwaggerResponse<RespWapper | null>>><any>_observableThrow(e);
                }
            } else
                return <Observable<SwaggerResponse<RespWapper | null>>><any>_observableThrow(response_);
        }));
    }

    protected processLogin(response: HttpResponseBase): Observable<SwaggerResponse<RespWapper | null>> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RespWapper.fromJS(resultData200) : <any>null;
            return _observableOf(new SwaggerResponse(status, _headers, result200));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<RespWapper | null>>(new SwaggerResponse(status, _headers, <any>null));
    }

    getProfile(id?: string | null | undefined): Observable<SwaggerResponse<RespWapperOfProfileResp | null>> {
        let url_ = this.baseUrl + "/api/v1/Account/profile?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGetProfile(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetProfile(<any>response_);
                } catch (e) {
                    return <Observable<SwaggerResponse<RespWapperOfProfileResp | null>>><any>_observableThrow(e);
                }
            } else
                return <Observable<SwaggerResponse<RespWapperOfProfileResp | null>>><any>_observableThrow(response_);
        }));
    }

    protected processGetProfile(response: HttpResponseBase): Observable<SwaggerResponse<RespWapperOfProfileResp | null>> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RespWapperOfProfileResp.fromJS(resultData200) : <any>null;
            return _observableOf(new SwaggerResponse(status, _headers, result200));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<RespWapperOfProfileResp | null>>(new SwaggerResponse(status, _headers, <any>null));
    }

    editProfile(req: EditProfileReq): Observable<SwaggerResponse<RespWapperOfProfileResp | null>> {
        let url_ = this.baseUrl + "/api/v1/Account/editProfile";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(req);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("put", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processEditProfile(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEditProfile(<any>response_);
                } catch (e) {
                    return <Observable<SwaggerResponse<RespWapperOfProfileResp | null>>><any>_observableThrow(e);
                }
            } else
                return <Observable<SwaggerResponse<RespWapperOfProfileResp | null>>><any>_observableThrow(response_);
        }));
    }

    protected processEditProfile(response: HttpResponseBase): Observable<SwaggerResponse<RespWapperOfProfileResp | null>> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RespWapperOfProfileResp.fromJS(resultData200) : <any>null;
            return _observableOf(new SwaggerResponse(status, _headers, result200));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<RespWapperOfProfileResp | null>>(new SwaggerResponse(status, _headers, <any>null));
    }

    retrievePassword(req: RetrievePasswordReq): Observable<SwaggerResponse<RespWapper | null>> {
        let url_ = this.baseUrl + "/api/v1/Account/retrievePassword";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(req);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processRetrievePassword(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRetrievePassword(<any>response_);
                } catch (e) {
                    return <Observable<SwaggerResponse<RespWapper | null>>><any>_observableThrow(e);
                }
            } else
                return <Observable<SwaggerResponse<RespWapper | null>>><any>_observableThrow(response_);
        }));
    }

    protected processRetrievePassword(response: HttpResponseBase): Observable<SwaggerResponse<RespWapper | null>> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RespWapper.fromJS(resultData200) : <any>null;
            return _observableOf(new SwaggerResponse(status, _headers, result200));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<RespWapper | null>>(new SwaggerResponse(status, _headers, <any>null));
    }

    resetPassword(req: ResetPasswordReq): Observable<SwaggerResponse<RespWapper | null>> {
        let url_ = this.baseUrl + "/api/v1/Account/resetPassword";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(req);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processResetPassword(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processResetPassword(<any>response_);
                } catch (e) {
                    return <Observable<SwaggerResponse<RespWapper | null>>><any>_observableThrow(e);
                }
            } else
                return <Observable<SwaggerResponse<RespWapper | null>>><any>_observableThrow(response_);
        }));
    }

    protected processResetPassword(response: HttpResponseBase): Observable<SwaggerResponse<RespWapper | null>> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RespWapper.fromJS(resultData200) : <any>null;
            return _observableOf(new SwaggerResponse(status, _headers, result200));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<RespWapper | null>>(new SwaggerResponse(status, _headers, <any>null));
    }

    followOrNot(id: string): Observable<SwaggerResponse<RespWapper | null>> {
        let url_ = this.baseUrl + "/api/v1/Account/followOrNot";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(id);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processFollowOrNot(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processFollowOrNot(<any>response_);
                } catch (e) {
                    return <Observable<SwaggerResponse<RespWapper | null>>><any>_observableThrow(e);
                }
            } else
                return <Observable<SwaggerResponse<RespWapper | null>>><any>_observableThrow(response_);
        }));
    }

    protected processFollowOrNot(response: HttpResponseBase): Observable<SwaggerResponse<RespWapper | null>> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RespWapper.fromJS(resultData200) : <any>null;
            return _observableOf(new SwaggerResponse(status, _headers, result200));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<RespWapper | null>>(new SwaggerResponse(status, _headers, <any>null));
    }

    logout(): Observable<SwaggerResponse<void>> {
        let url_ = this.baseUrl + "/api/v1/Account/logout";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processLogout(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLogout(<any>response_);
                } catch (e) {
                    return <Observable<SwaggerResponse<void>>><any>_observableThrow(e);
                }
            } else
                return <Observable<SwaggerResponse<void>>><any>_observableThrow(response_);
        }));
    }

    protected processLogout(response: HttpResponseBase): Observable<SwaggerResponse<void>> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<SwaggerResponse<void>>(new SwaggerResponse(status, _headers, <any>null));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<void>>(new SwaggerResponse(status, _headers, <any>null));
    }

    getFollows(pageIndex?: number | undefined, pageSize?: number | undefined, orderBy?: string | null | undefined, isAscending?: boolean | undefined, id?: string | null | undefined): Observable<SwaggerResponse<RespWapperOfPagingDtoOfUserSimpleResp | null>> {
        let url_ = this.baseUrl + "/api/v1/Account/getFollows?";
        if (pageIndex === null)
            throw new Error("The parameter 'pageIndex' cannot be null.");
        else if (pageIndex !== undefined)
            url_ += "PageIndex=" + encodeURIComponent("" + pageIndex) + "&"; 
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&"; 
        if (orderBy !== undefined)
            url_ += "OrderBy=" + encodeURIComponent("" + orderBy) + "&"; 
        if (isAscending === null)
            throw new Error("The parameter 'isAscending' cannot be null.");
        else if (isAscending !== undefined)
            url_ += "IsAscending=" + encodeURIComponent("" + isAscending) + "&"; 
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGetFollows(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetFollows(<any>response_);
                } catch (e) {
                    return <Observable<SwaggerResponse<RespWapperOfPagingDtoOfUserSimpleResp | null>>><any>_observableThrow(e);
                }
            } else
                return <Observable<SwaggerResponse<RespWapperOfPagingDtoOfUserSimpleResp | null>>><any>_observableThrow(response_);
        }));
    }

    protected processGetFollows(response: HttpResponseBase): Observable<SwaggerResponse<RespWapperOfPagingDtoOfUserSimpleResp | null>> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RespWapperOfPagingDtoOfUserSimpleResp.fromJS(resultData200) : <any>null;
            return _observableOf(new SwaggerResponse(status, _headers, result200));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<RespWapperOfPagingDtoOfUserSimpleResp | null>>(new SwaggerResponse(status, _headers, <any>null));
    }

    getFans(pageIndex?: number | undefined, pageSize?: number | undefined, orderBy?: string | null | undefined, isAscending?: boolean | undefined, id?: string | null | undefined): Observable<SwaggerResponse<RespWapperOfPagingDtoOfUserSimpleResp | null>> {
        let url_ = this.baseUrl + "/api/v1/Account/getFans?";
        if (pageIndex === null)
            throw new Error("The parameter 'pageIndex' cannot be null.");
        else if (pageIndex !== undefined)
            url_ += "PageIndex=" + encodeURIComponent("" + pageIndex) + "&"; 
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&"; 
        if (orderBy !== undefined)
            url_ += "OrderBy=" + encodeURIComponent("" + orderBy) + "&"; 
        if (isAscending === null)
            throw new Error("The parameter 'isAscending' cannot be null.");
        else if (isAscending !== undefined)
            url_ += "IsAscending=" + encodeURIComponent("" + isAscending) + "&"; 
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGetFans(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetFans(<any>response_);
                } catch (e) {
                    return <Observable<SwaggerResponse<RespWapperOfPagingDtoOfUserSimpleResp | null>>><any>_observableThrow(e);
                }
            } else
                return <Observable<SwaggerResponse<RespWapperOfPagingDtoOfUserSimpleResp | null>>><any>_observableThrow(response_);
        }));
    }

    protected processGetFans(response: HttpResponseBase): Observable<SwaggerResponse<RespWapperOfPagingDtoOfUserSimpleResp | null>> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RespWapperOfPagingDtoOfUserSimpleResp.fromJS(resultData200) : <any>null;
            return _observableOf(new SwaggerResponse(status, _headers, result200));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<RespWapperOfPagingDtoOfUserSimpleResp | null>>(new SwaggerResponse(status, _headers, <any>null));
    }

    favoriteOrNot(id: string): Observable<SwaggerResponse<RespWapper | null>> {
        let url_ = this.baseUrl + "/api/v1/Account/favorite";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(id);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processFavoriteOrNot(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processFavoriteOrNot(<any>response_);
                } catch (e) {
                    return <Observable<SwaggerResponse<RespWapper | null>>><any>_observableThrow(e);
                }
            } else
                return <Observable<SwaggerResponse<RespWapper | null>>><any>_observableThrow(response_);
        }));
    }

    protected processFavoriteOrNot(response: HttpResponseBase): Observable<SwaggerResponse<RespWapper | null>> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RespWapper.fromJS(resultData200) : <any>null;
            return _observableOf(new SwaggerResponse(status, _headers, result200));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<RespWapper | null>>(new SwaggerResponse(status, _headers, <any>null));
    }

    isFavorite(id?: string | undefined): Observable<SwaggerResponse<RespWapperOfBoolean | null>> {
        let url_ = this.baseUrl + "/api/v1/Account/isfavorite?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processIsFavorite(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processIsFavorite(<any>response_);
                } catch (e) {
                    return <Observable<SwaggerResponse<RespWapperOfBoolean | null>>><any>_observableThrow(e);
                }
            } else
                return <Observable<SwaggerResponse<RespWapperOfBoolean | null>>><any>_observableThrow(response_);
        }));
    }

    protected processIsFavorite(response: HttpResponseBase): Observable<SwaggerResponse<RespWapperOfBoolean | null>> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RespWapperOfBoolean.fromJS(resultData200) : <any>null;
            return _observableOf(new SwaggerResponse(status, _headers, result200));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<RespWapperOfBoolean | null>>(new SwaggerResponse(status, _headers, <any>null));
    }

    isFollow(id?: string | null | undefined): Observable<SwaggerResponse<RespWapperOfBoolean | null>> {
        let url_ = this.baseUrl + "/api/v1/Account/isfollow?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processIsFollow(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processIsFollow(<any>response_);
                } catch (e) {
                    return <Observable<SwaggerResponse<RespWapperOfBoolean | null>>><any>_observableThrow(e);
                }
            } else
                return <Observable<SwaggerResponse<RespWapperOfBoolean | null>>><any>_observableThrow(response_);
        }));
    }

    protected processIsFollow(response: HttpResponseBase): Observable<SwaggerResponse<RespWapperOfBoolean | null>> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RespWapperOfBoolean.fromJS(resultData200) : <any>null;
            return _observableOf(new SwaggerResponse(status, _headers, result200));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<RespWapperOfBoolean | null>>(new SwaggerResponse(status, _headers, <any>null));
    }

    modifyPassword(req: ModifyPasswordReq): Observable<SwaggerResponse<RespWapper | null>> {
        let url_ = this.baseUrl + "/api/v1/Account/modifyPassword";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(req);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("put", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processModifyPassword(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processModifyPassword(<any>response_);
                } catch (e) {
                    return <Observable<SwaggerResponse<RespWapper | null>>><any>_observableThrow(e);
                }
            } else
                return <Observable<SwaggerResponse<RespWapper | null>>><any>_observableThrow(response_);
        }));
    }

    protected processModifyPassword(response: HttpResponseBase): Observable<SwaggerResponse<RespWapper | null>> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RespWapper.fromJS(resultData200) : <any>null;
            return _observableOf(new SwaggerResponse(status, _headers, result200));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<RespWapper | null>>(new SwaggerResponse(status, _headers, <any>null));
    }

    modifyAvatar(file?: FileParameter | null | undefined): Observable<SwaggerResponse<RespWapperOfString | null>> {
        let url_ = this.baseUrl + "/api/v1/Account/modifyAvatar";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (file !== null && file !== undefined)
            content_.append("file", file.data, file.fileName ? file.fileName : "file");

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processModifyAvatar(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processModifyAvatar(<any>response_);
                } catch (e) {
                    return <Observable<SwaggerResponse<RespWapperOfString | null>>><any>_observableThrow(e);
                }
            } else
                return <Observable<SwaggerResponse<RespWapperOfString | null>>><any>_observableThrow(response_);
        }));
    }

    protected processModifyAvatar(response: HttpResponseBase): Observable<SwaggerResponse<RespWapperOfString | null>> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RespWapperOfString.fromJS(resultData200) : <any>null;
            return _observableOf(new SwaggerResponse(status, _headers, result200));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<RespWapperOfString | null>>(new SwaggerResponse(status, _headers, <any>null));
    }

    getAvatar(id: string | null): Observable<SwaggerResponse<void>> {
        let url_ = this.baseUrl + "/api/v1/Account/avatar/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGetAvatar(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAvatar(<any>response_);
                } catch (e) {
                    return <Observable<SwaggerResponse<void>>><any>_observableThrow(e);
                }
            } else
                return <Observable<SwaggerResponse<void>>><any>_observableThrow(response_);
        }));
    }

    protected processGetAvatar(response: HttpResponseBase): Observable<SwaggerResponse<void>> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<SwaggerResponse<void>>(new SwaggerResponse(status, _headers, <any>null));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<void>>(new SwaggerResponse(status, _headers, <any>null));
    }
}

@Injectable({
    providedIn: 'root'
})
export class AdminService extends BaseClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super();
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://192.168.252.113:5000";
    }

    searchUsers(nickname?: string | null | undefined, email?: string | null | undefined, isMuted?: boolean | null | undefined, isModerator?: boolean | null | undefined, pageIndex?: number | undefined, pageSize?: number | undefined, orderBy?: string | null | undefined, isAscending?: boolean | undefined): Observable<SwaggerResponse<RespWapperOfPagingDtoOfListItem | null>> {
        let url_ = this.baseUrl + "/api/v1/Admin/searchUsers?";
        if (nickname !== undefined)
            url_ += "Nickname=" + encodeURIComponent("" + nickname) + "&"; 
        if (email !== undefined)
            url_ += "Email=" + encodeURIComponent("" + email) + "&"; 
        if (isMuted !== undefined)
            url_ += "IsMuted=" + encodeURIComponent("" + isMuted) + "&"; 
        if (isModerator !== undefined)
            url_ += "IsModerator=" + encodeURIComponent("" + isModerator) + "&"; 
        if (pageIndex === null)
            throw new Error("The parameter 'pageIndex' cannot be null.");
        else if (pageIndex !== undefined)
            url_ += "PageIndex=" + encodeURIComponent("" + pageIndex) + "&"; 
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&"; 
        if (orderBy !== undefined)
            url_ += "OrderBy=" + encodeURIComponent("" + orderBy) + "&"; 
        if (isAscending === null)
            throw new Error("The parameter 'isAscending' cannot be null.");
        else if (isAscending !== undefined)
            url_ += "IsAscending=" + encodeURIComponent("" + isAscending) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSearchUsers(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSearchUsers(<any>response_);
                } catch (e) {
                    return <Observable<SwaggerResponse<RespWapperOfPagingDtoOfListItem | null>>><any>_observableThrow(e);
                }
            } else
                return <Observable<SwaggerResponse<RespWapperOfPagingDtoOfListItem | null>>><any>_observableThrow(response_);
        }));
    }

    protected processSearchUsers(response: HttpResponseBase): Observable<SwaggerResponse<RespWapperOfPagingDtoOfListItem | null>> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RespWapperOfPagingDtoOfListItem.fromJS(resultData200) : <any>null;
            return _observableOf(new SwaggerResponse(status, _headers, result200));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<RespWapperOfPagingDtoOfListItem | null>>(new SwaggerResponse(status, _headers, <any>null));
    }

    muteUser(id?: string | null | undefined): Observable<SwaggerResponse<RespWapper | null>> {
        let url_ = this.baseUrl + "/api/v1/Admin/muteUser?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("put", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processMuteUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processMuteUser(<any>response_);
                } catch (e) {
                    return <Observable<SwaggerResponse<RespWapper | null>>><any>_observableThrow(e);
                }
            } else
                return <Observable<SwaggerResponse<RespWapper | null>>><any>_observableThrow(response_);
        }));
    }

    protected processMuteUser(response: HttpResponseBase): Observable<SwaggerResponse<RespWapper | null>> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RespWapper.fromJS(resultData200) : <any>null;
            return _observableOf(new SwaggerResponse(status, _headers, result200));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<RespWapper | null>>(new SwaggerResponse(status, _headers, <any>null));
    }

    unMuteUser(id?: string | null | undefined): Observable<SwaggerResponse<RespWapper | null>> {
        let url_ = this.baseUrl + "/api/v1/Admin/unmuteUser?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("put", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processUnMuteUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUnMuteUser(<any>response_);
                } catch (e) {
                    return <Observable<SwaggerResponse<RespWapper | null>>><any>_observableThrow(e);
                }
            } else
                return <Observable<SwaggerResponse<RespWapper | null>>><any>_observableThrow(response_);
        }));
    }

    protected processUnMuteUser(response: HttpResponseBase): Observable<SwaggerResponse<RespWapper | null>> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RespWapper.fromJS(resultData200) : <any>null;
            return _observableOf(new SwaggerResponse(status, _headers, result200));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<RespWapper | null>>(new SwaggerResponse(status, _headers, <any>null));
    }
}

@Injectable({
    providedIn: 'root'
})
export class ApplicationService extends BaseClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super();
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://192.168.252.113:5000";
    }

    get(): Observable<SwaggerResponse<RespWapperOfProfile | null>> {
        let url_ = this.baseUrl + "/api/Application";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<SwaggerResponse<RespWapperOfProfile | null>>><any>_observableThrow(e);
                }
            } else
                return <Observable<SwaggerResponse<RespWapperOfProfile | null>>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<SwaggerResponse<RespWapperOfProfile | null>> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RespWapperOfProfile.fromJS(resultData200) : <any>null;
            return _observableOf(new SwaggerResponse(status, _headers, result200));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<RespWapperOfProfile | null>>(new SwaggerResponse(status, _headers, <any>null));
    }

    update(req: UpdateSettingsReq): Observable<SwaggerResponse<RespWapper | null>> {
        let url_ = this.baseUrl + "/api/Application";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(req);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("put", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<SwaggerResponse<RespWapper | null>>><any>_observableThrow(e);
                }
            } else
                return <Observable<SwaggerResponse<RespWapper | null>>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<SwaggerResponse<RespWapper | null>> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RespWapper.fromJS(resultData200) : <any>null;
            return _observableOf(new SwaggerResponse(status, _headers, result200));
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<RespWapper | null>>(new SwaggerResponse(status, _headers, <any>null));
    }
}

@Injectable({
    providedIn: 'root'
})
export class ArticleService extends BaseClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super();
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://192.168.252.113:5000";
    }

    getTypes(): Observable<SwaggerResponse<RespWapperOfListOfValueTitlePairOfInt32 | null>> {
        let url_ = this.baseUrl + "/api/v1/Article/types";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGetTypes(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTypes(<any>response_);
                } catch (e) {
                    return <Observable<SwaggerResponse<RespWapperOfListOfValueTitlePairOfInt32 | null>>><any>_observableThrow(e);
                }
            } else
                return <Observable<SwaggerResponse<RespWapperOfListOfValueTitlePairOfInt32 | null>>><any>_observableThrow(response_);
        }));
    }

    protected processGetTypes(response: HttpResponseBase): Observable<SwaggerResponse<RespWapperOfListOfValueTitlePairOfInt32 | null>> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RespWapperOfListOfValueTitlePairOfInt32.fromJS(resultData200) : <any>null;
            return _observableOf(new SwaggerResponse(status, _headers, result200));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<RespWapperOfListOfValueTitlePairOfInt32 | null>>(new SwaggerResponse(status, _headers, <any>null));
    }

    getStates(): Observable<SwaggerResponse<RespWapperOfListOfValueTitlePairOfInt32 | null>> {
        let url_ = this.baseUrl + "/api/v1/Article/states";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGetStates(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetStates(<any>response_);
                } catch (e) {
                    return <Observable<SwaggerResponse<RespWapperOfListOfValueTitlePairOfInt32 | null>>><any>_observableThrow(e);
                }
            } else
                return <Observable<SwaggerResponse<RespWapperOfListOfValueTitlePairOfInt32 | null>>><any>_observableThrow(response_);
        }));
    }

    protected processGetStates(response: HttpResponseBase): Observable<SwaggerResponse<RespWapperOfListOfValueTitlePairOfInt32 | null>> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RespWapperOfListOfValueTitlePairOfInt32.fromJS(resultData200) : <any>null;
            return _observableOf(new SwaggerResponse(status, _headers, result200));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<RespWapperOfListOfValueTitlePairOfInt32 | null>>(new SwaggerResponse(status, _headers, <any>null));
    }

    search(title?: string | null | undefined, keywords?: string | null | undefined, categoryId?: string | null | undefined, state?: ArticleState | null | undefined, type?: ArticleType | null | undefined, orderBy?: string | null | undefined, isAscending?: boolean | undefined, pageIndex?: number | undefined, pageSize?: number | undefined): Observable<SwaggerResponse<RespWapperOfPagingDtoOfListItem2 | null>> {
        let url_ = this.baseUrl + "/api/v1/Article/search?";
        if (title !== undefined)
            url_ += "Title=" + encodeURIComponent("" + title) + "&"; 
        if (keywords !== undefined)
            url_ += "Keywords=" + encodeURIComponent("" + keywords) + "&"; 
        if (categoryId !== undefined)
            url_ += "CategoryId=" + encodeURIComponent("" + categoryId) + "&"; 
        if (state !== undefined)
            url_ += "State=" + encodeURIComponent("" + state) + "&"; 
        if (type !== undefined)
            url_ += "Type=" + encodeURIComponent("" + type) + "&"; 
        if (orderBy !== undefined)
            url_ += "OrderBy=" + encodeURIComponent("" + orderBy) + "&"; 
        if (isAscending === null)
            throw new Error("The parameter 'isAscending' cannot be null.");
        else if (isAscending !== undefined)
            url_ += "IsAscending=" + encodeURIComponent("" + isAscending) + "&"; 
        if (pageIndex === null)
            throw new Error("The parameter 'pageIndex' cannot be null.");
        else if (pageIndex !== undefined)
            url_ += "PageIndex=" + encodeURIComponent("" + pageIndex) + "&"; 
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSearch(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSearch(<any>response_);
                } catch (e) {
                    return <Observable<SwaggerResponse<RespWapperOfPagingDtoOfListItem2 | null>>><any>_observableThrow(e);
                }
            } else
                return <Observable<SwaggerResponse<RespWapperOfPagingDtoOfListItem2 | null>>><any>_observableThrow(response_);
        }));
    }

    protected processSearch(response: HttpResponseBase): Observable<SwaggerResponse<RespWapperOfPagingDtoOfListItem2 | null>> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RespWapperOfPagingDtoOfListItem2.fromJS(resultData200) : <any>null;
            return _observableOf(new SwaggerResponse(status, _headers, result200));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<RespWapperOfPagingDtoOfListItem2 | null>>(new SwaggerResponse(status, _headers, <any>null));
    }

    addArticle(req: AddArticleReq): Observable<SwaggerResponse<RespWapperOfGuid | null>> {
        let url_ = this.baseUrl + "/api/v1/Article/addArticle";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(req);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processAddArticle(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddArticle(<any>response_);
                } catch (e) {
                    return <Observable<SwaggerResponse<RespWapperOfGuid | null>>><any>_observableThrow(e);
                }
            } else
                return <Observable<SwaggerResponse<RespWapperOfGuid | null>>><any>_observableThrow(response_);
        }));
    }

    protected processAddArticle(response: HttpResponseBase): Observable<SwaggerResponse<RespWapperOfGuid | null>> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RespWapperOfGuid.fromJS(resultData200) : <any>null;
            return _observableOf(new SwaggerResponse(status, _headers, result200));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<RespWapperOfGuid | null>>(new SwaggerResponse(status, _headers, <any>null));
    }

    addQuestion(req: AddQuestionReq): Observable<SwaggerResponse<RespWapperOfGuid | null>> {
        let url_ = this.baseUrl + "/api/v1/Article/addQuestion";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(req);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processAddQuestion(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddQuestion(<any>response_);
                } catch (e) {
                    return <Observable<SwaggerResponse<RespWapperOfGuid | null>>><any>_observableThrow(e);
                }
            } else
                return <Observable<SwaggerResponse<RespWapperOfGuid | null>>><any>_observableThrow(response_);
        }));
    }

    protected processAddQuestion(response: HttpResponseBase): Observable<SwaggerResponse<RespWapperOfGuid | null>> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RespWapperOfGuid.fromJS(resultData200) : <any>null;
            return _observableOf(new SwaggerResponse(status, _headers, result200));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<RespWapperOfGuid | null>>(new SwaggerResponse(status, _headers, <any>null));
    }

    view(id?: string | undefined): Observable<SwaggerResponse<RespWapperOfArticleResp | null>> {
        let url_ = this.baseUrl + "/api/v1/Article?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processView(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processView(<any>response_);
                } catch (e) {
                    return <Observable<SwaggerResponse<RespWapperOfArticleResp | null>>><any>_observableThrow(e);
                }
            } else
                return <Observable<SwaggerResponse<RespWapperOfArticleResp | null>>><any>_observableThrow(response_);
        }));
    }

    protected processView(response: HttpResponseBase): Observable<SwaggerResponse<RespWapperOfArticleResp | null>> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RespWapperOfArticleResp.fromJS(resultData200) : <any>null;
            return _observableOf(new SwaggerResponse(status, _headers, result200));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<RespWapperOfArticleResp | null>>(new SwaggerResponse(status, _headers, <any>null));
    }

    delete(id?: string | undefined): Observable<SwaggerResponse<RespWapper | null>> {
        let url_ = this.baseUrl + "/api/v1/Article?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("delete", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(<any>response_);
                } catch (e) {
                    return <Observable<SwaggerResponse<RespWapper | null>>><any>_observableThrow(e);
                }
            } else
                return <Observable<SwaggerResponse<RespWapper | null>>><any>_observableThrow(response_);
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<SwaggerResponse<RespWapper | null>> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RespWapper.fromJS(resultData200) : <any>null;
            return _observableOf(new SwaggerResponse(status, _headers, result200));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<RespWapper | null>>(new SwaggerResponse(status, _headers, <any>null));
    }

    getComments(articleId?: string | undefined, pageIndex?: number | undefined, pageSize?: number | undefined, orderBy?: string | null | undefined, isAscending?: boolean | undefined): Observable<SwaggerResponse<RespWapperOfPagingDtoOfCommentItem | null>> {
        let url_ = this.baseUrl + "/api/v1/Article/getComments?";
        if (articleId === null)
            throw new Error("The parameter 'articleId' cannot be null.");
        else if (articleId !== undefined)
            url_ += "ArticleId=" + encodeURIComponent("" + articleId) + "&"; 
        if (pageIndex === null)
            throw new Error("The parameter 'pageIndex' cannot be null.");
        else if (pageIndex !== undefined)
            url_ += "PageIndex=" + encodeURIComponent("" + pageIndex) + "&"; 
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&"; 
        if (orderBy !== undefined)
            url_ += "OrderBy=" + encodeURIComponent("" + orderBy) + "&"; 
        if (isAscending === null)
            throw new Error("The parameter 'isAscending' cannot be null.");
        else if (isAscending !== undefined)
            url_ += "IsAscending=" + encodeURIComponent("" + isAscending) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGetComments(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetComments(<any>response_);
                } catch (e) {
                    return <Observable<SwaggerResponse<RespWapperOfPagingDtoOfCommentItem | null>>><any>_observableThrow(e);
                }
            } else
                return <Observable<SwaggerResponse<RespWapperOfPagingDtoOfCommentItem | null>>><any>_observableThrow(response_);
        }));
    }

    protected processGetComments(response: HttpResponseBase): Observable<SwaggerResponse<RespWapperOfPagingDtoOfCommentItem | null>> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RespWapperOfPagingDtoOfCommentItem.fromJS(resultData200) : <any>null;
            return _observableOf(new SwaggerResponse(status, _headers, result200));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<RespWapperOfPagingDtoOfCommentItem | null>>(new SwaggerResponse(status, _headers, <any>null));
    }

    addDraft(req: AddArticleReq): Observable<SwaggerResponse<RespWapperOfGuid | null>> {
        let url_ = this.baseUrl + "/api/v1/Article/addDraft";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(req);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processAddDraft(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddDraft(<any>response_);
                } catch (e) {
                    return <Observable<SwaggerResponse<RespWapperOfGuid | null>>><any>_observableThrow(e);
                }
            } else
                return <Observable<SwaggerResponse<RespWapperOfGuid | null>>><any>_observableThrow(response_);
        }));
    }

    protected processAddDraft(response: HttpResponseBase): Observable<SwaggerResponse<RespWapperOfGuid | null>> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RespWapperOfGuid.fromJS(resultData200) : <any>null;
            return _observableOf(new SwaggerResponse(status, _headers, result200));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<RespWapperOfGuid | null>>(new SwaggerResponse(status, _headers, <any>null));
    }

    editQuestion(req: EditQuestionReq): Observable<SwaggerResponse<RespWapperOfGuid | null>> {
        let url_ = this.baseUrl + "/api/v1/Article/editQuestion";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(req);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("put", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processEditQuestion(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEditQuestion(<any>response_);
                } catch (e) {
                    return <Observable<SwaggerResponse<RespWapperOfGuid | null>>><any>_observableThrow(e);
                }
            } else
                return <Observable<SwaggerResponse<RespWapperOfGuid | null>>><any>_observableThrow(response_);
        }));
    }

    protected processEditQuestion(response: HttpResponseBase): Observable<SwaggerResponse<RespWapperOfGuid | null>> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RespWapperOfGuid.fromJS(resultData200) : <any>null;
            return _observableOf(new SwaggerResponse(status, _headers, result200));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<RespWapperOfGuid | null>>(new SwaggerResponse(status, _headers, <any>null));
    }

    editArticle(req: EditArticleReq): Observable<SwaggerResponse<RespWapperOfGuid | null>> {
        let url_ = this.baseUrl + "/api/v1/Article/editArticle";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(req);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("put", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processEditArticle(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEditArticle(<any>response_);
                } catch (e) {
                    return <Observable<SwaggerResponse<RespWapperOfGuid | null>>><any>_observableThrow(e);
                }
            } else
                return <Observable<SwaggerResponse<RespWapperOfGuid | null>>><any>_observableThrow(response_);
        }));
    }

    protected processEditArticle(response: HttpResponseBase): Observable<SwaggerResponse<RespWapperOfGuid | null>> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RespWapperOfGuid.fromJS(resultData200) : <any>null;
            return _observableOf(new SwaggerResponse(status, _headers, result200));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<RespWapperOfGuid | null>>(new SwaggerResponse(status, _headers, <any>null));
    }

    editCanComment(req: EditCanCommentReq): Observable<SwaggerResponse<RespWapperOfGuid | null>> {
        let url_ = this.baseUrl + "/api/v1/Article/editCanComment";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(req);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("put", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processEditCanComment(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEditCanComment(<any>response_);
                } catch (e) {
                    return <Observable<SwaggerResponse<RespWapperOfGuid | null>>><any>_observableThrow(e);
                }
            } else
                return <Observable<SwaggerResponse<RespWapperOfGuid | null>>><any>_observableThrow(response_);
        }));
    }

    protected processEditCanComment(response: HttpResponseBase): Observable<SwaggerResponse<RespWapperOfGuid | null>> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RespWapperOfGuid.fromJS(resultData200) : <any>null;
            return _observableOf(new SwaggerResponse(status, _headers, result200));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<RespWapperOfGuid | null>>(new SwaggerResponse(status, _headers, <any>null));
    }

    deleteForced(id?: string | undefined): Observable<SwaggerResponse<RespWapper | null>> {
        let url_ = this.baseUrl + "/api/v1/Article/forced?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("delete", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processDeleteForced(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteForced(<any>response_);
                } catch (e) {
                    return <Observable<SwaggerResponse<RespWapper | null>>><any>_observableThrow(e);
                }
            } else
                return <Observable<SwaggerResponse<RespWapper | null>>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteForced(response: HttpResponseBase): Observable<SwaggerResponse<RespWapper | null>> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RespWapper.fromJS(resultData200) : <any>null;
            return _observableOf(new SwaggerResponse(status, _headers, result200));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<RespWapper | null>>(new SwaggerResponse(status, _headers, <any>null));
    }

    topArticle(req: TopArticleReq): Observable<SwaggerResponse<RespWapper | null>> {
        let url_ = this.baseUrl + "/api/v1/Article/top";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(req);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("put", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processTopArticle(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTopArticle(<any>response_);
                } catch (e) {
                    return <Observable<SwaggerResponse<RespWapper | null>>><any>_observableThrow(e);
                }
            } else
                return <Observable<SwaggerResponse<RespWapper | null>>><any>_observableThrow(response_);
        }));
    }

    protected processTopArticle(response: HttpResponseBase): Observable<SwaggerResponse<RespWapper | null>> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RespWapper.fromJS(resultData200) : <any>null;
            return _observableOf(new SwaggerResponse(status, _headers, result200));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<RespWapper | null>>(new SwaggerResponse(status, _headers, <any>null));
    }

    cancelTopArticle(id: string): Observable<SwaggerResponse<RespWapper | null>> {
        let url_ = this.baseUrl + "/api/v1/Article/cancelTop";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(id);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("put", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCancelTopArticle(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCancelTopArticle(<any>response_);
                } catch (e) {
                    return <Observable<SwaggerResponse<RespWapper | null>>><any>_observableThrow(e);
                }
            } else
                return <Observable<SwaggerResponse<RespWapper | null>>><any>_observableThrow(response_);
        }));
    }

    protected processCancelTopArticle(response: HttpResponseBase): Observable<SwaggerResponse<RespWapper | null>> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RespWapper.fromJS(resultData200) : <any>null;
            return _observableOf(new SwaggerResponse(status, _headers, result200));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<RespWapper | null>>(new SwaggerResponse(status, _headers, <any>null));
    }

    like(id: string): Observable<SwaggerResponse<RespWapperOfLikeOrNotResp | null>> {
        let url_ = this.baseUrl + "/api/v1/Article/like";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(id);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("put", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processLike(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLike(<any>response_);
                } catch (e) {
                    return <Observable<SwaggerResponse<RespWapperOfLikeOrNotResp | null>>><any>_observableThrow(e);
                }
            } else
                return <Observable<SwaggerResponse<RespWapperOfLikeOrNotResp | null>>><any>_observableThrow(response_);
        }));
    }

    protected processLike(response: HttpResponseBase): Observable<SwaggerResponse<RespWapperOfLikeOrNotResp | null>> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RespWapperOfLikeOrNotResp.fromJS(resultData200) : <any>null;
            return _observableOf(new SwaggerResponse(status, _headers, result200));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<RespWapperOfLikeOrNotResp | null>>(new SwaggerResponse(status, _headers, <any>null));
    }

    dislike(id: string): Observable<SwaggerResponse<RespWapperOfLikeOrNotResp | null>> {
        let url_ = this.baseUrl + "/api/v1/Article/dislike";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(id);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("put", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processDislike(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDislike(<any>response_);
                } catch (e) {
                    return <Observable<SwaggerResponse<RespWapperOfLikeOrNotResp | null>>><any>_observableThrow(e);
                }
            } else
                return <Observable<SwaggerResponse<RespWapperOfLikeOrNotResp | null>>><any>_observableThrow(response_);
        }));
    }

    protected processDislike(response: HttpResponseBase): Observable<SwaggerResponse<RespWapperOfLikeOrNotResp | null>> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RespWapperOfLikeOrNotResp.fromJS(resultData200) : <any>null;
            return _observableOf(new SwaggerResponse(status, _headers, result200));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<RespWapperOfLikeOrNotResp | null>>(new SwaggerResponse(status, _headers, <any>null));
    }

    likeComment(id: number): Observable<SwaggerResponse<RespWapperOfLikeOrNotResp | null>> {
        let url_ = this.baseUrl + "/api/v1/Article/likeComment";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(id);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("put", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processLikeComment(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLikeComment(<any>response_);
                } catch (e) {
                    return <Observable<SwaggerResponse<RespWapperOfLikeOrNotResp | null>>><any>_observableThrow(e);
                }
            } else
                return <Observable<SwaggerResponse<RespWapperOfLikeOrNotResp | null>>><any>_observableThrow(response_);
        }));
    }

    protected processLikeComment(response: HttpResponseBase): Observable<SwaggerResponse<RespWapperOfLikeOrNotResp | null>> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RespWapperOfLikeOrNotResp.fromJS(resultData200) : <any>null;
            return _observableOf(new SwaggerResponse(status, _headers, result200));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<RespWapperOfLikeOrNotResp | null>>(new SwaggerResponse(status, _headers, <any>null));
    }

    disLikeComment(id: number): Observable<SwaggerResponse<RespWapperOfLikeOrNotResp | null>> {
        let url_ = this.baseUrl + "/api/v1/Article/dislikeComment";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(id);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("put", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processDisLikeComment(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDisLikeComment(<any>response_);
                } catch (e) {
                    return <Observable<SwaggerResponse<RespWapperOfLikeOrNotResp | null>>><any>_observableThrow(e);
                }
            } else
                return <Observable<SwaggerResponse<RespWapperOfLikeOrNotResp | null>>><any>_observableThrow(response_);
        }));
    }

    protected processDisLikeComment(response: HttpResponseBase): Observable<SwaggerResponse<RespWapperOfLikeOrNotResp | null>> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RespWapperOfLikeOrNotResp.fromJS(resultData200) : <any>null;
            return _observableOf(new SwaggerResponse(status, _headers, result200));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<RespWapperOfLikeOrNotResp | null>>(new SwaggerResponse(status, _headers, <any>null));
    }

    reply(req: ReplyArticleReq): Observable<SwaggerResponse<RespWapperOfCommentItem | null>> {
        let url_ = this.baseUrl + "/api/v1/Article/reply";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(req);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processReply(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processReply(<any>response_);
                } catch (e) {
                    return <Observable<SwaggerResponse<RespWapperOfCommentItem | null>>><any>_observableThrow(e);
                }
            } else
                return <Observable<SwaggerResponse<RespWapperOfCommentItem | null>>><any>_observableThrow(response_);
        }));
    }

    protected processReply(response: HttpResponseBase): Observable<SwaggerResponse<RespWapperOfCommentItem | null>> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RespWapperOfCommentItem.fromJS(resultData200) : <any>null;
            return _observableOf(new SwaggerResponse(status, _headers, result200));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<RespWapperOfCommentItem | null>>(new SwaggerResponse(status, _headers, <any>null));
    }

    replyComment(req: ReplyCommentReq): Observable<SwaggerResponse<RespWapperOfCommentItem | null>> {
        let url_ = this.baseUrl + "/api/v1/Article/replyComment";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(req);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processReplyComment(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processReplyComment(<any>response_);
                } catch (e) {
                    return <Observable<SwaggerResponse<RespWapperOfCommentItem | null>>><any>_observableThrow(e);
                }
            } else
                return <Observable<SwaggerResponse<RespWapperOfCommentItem | null>>><any>_observableThrow(response_);
        }));
    }

    protected processReplyComment(response: HttpResponseBase): Observable<SwaggerResponse<RespWapperOfCommentItem | null>> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RespWapperOfCommentItem.fromJS(resultData200) : <any>null;
            return _observableOf(new SwaggerResponse(status, _headers, result200));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<RespWapperOfCommentItem | null>>(new SwaggerResponse(status, _headers, <any>null));
    }

    finish(req: FinishReq): Observable<SwaggerResponse<RespWapperOfArticleResp | null>> {
        let url_ = this.baseUrl + "/api/v1/Article/finish";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(req);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("put", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processFinish(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processFinish(<any>response_);
                } catch (e) {
                    return <Observable<SwaggerResponse<RespWapperOfArticleResp | null>>><any>_observableThrow(e);
                }
            } else
                return <Observable<SwaggerResponse<RespWapperOfArticleResp | null>>><any>_observableThrow(response_);
        }));
    }

    protected processFinish(response: HttpResponseBase): Observable<SwaggerResponse<RespWapperOfArticleResp | null>> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RespWapperOfArticleResp.fromJS(resultData200) : <any>null;
            return _observableOf(new SwaggerResponse(status, _headers, result200));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<RespWapperOfArticleResp | null>>(new SwaggerResponse(status, _headers, <any>null));
    }

    getUserArticles(userId?: string | null | undefined, type?: ArticleType | undefined, pageIndex?: number | undefined, pageSize?: number | undefined, orderBy?: string | null | undefined, isAscending?: boolean | undefined): Observable<SwaggerResponse<RespWapperOfPagingDtoOfListItem2 | null>> {
        let url_ = this.baseUrl + "/api/v1/Article/getUserArticles?";
        if (userId !== undefined)
            url_ += "UserId=" + encodeURIComponent("" + userId) + "&"; 
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "Type=" + encodeURIComponent("" + type) + "&"; 
        if (pageIndex === null)
            throw new Error("The parameter 'pageIndex' cannot be null.");
        else if (pageIndex !== undefined)
            url_ += "PageIndex=" + encodeURIComponent("" + pageIndex) + "&"; 
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&"; 
        if (orderBy !== undefined)
            url_ += "OrderBy=" + encodeURIComponent("" + orderBy) + "&"; 
        if (isAscending === null)
            throw new Error("The parameter 'isAscending' cannot be null.");
        else if (isAscending !== undefined)
            url_ += "IsAscending=" + encodeURIComponent("" + isAscending) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGetUserArticles(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUserArticles(<any>response_);
                } catch (e) {
                    return <Observable<SwaggerResponse<RespWapperOfPagingDtoOfListItem2 | null>>><any>_observableThrow(e);
                }
            } else
                return <Observable<SwaggerResponse<RespWapperOfPagingDtoOfListItem2 | null>>><any>_observableThrow(response_);
        }));
    }

    protected processGetUserArticles(response: HttpResponseBase): Observable<SwaggerResponse<RespWapperOfPagingDtoOfListItem2 | null>> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RespWapperOfPagingDtoOfListItem2.fromJS(resultData200) : <any>null;
            return _observableOf(new SwaggerResponse(status, _headers, result200));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<RespWapperOfPagingDtoOfListItem2 | null>>(new SwaggerResponse(status, _headers, <any>null));
    }

    getUserFavorites(pageIndex?: number | undefined, pageSize?: number | undefined, orderBy?: string | null | undefined, isAscending?: boolean | undefined): Observable<SwaggerResponse<RespWapperOfPagingDtoOfListItem2 | null>> {
        let url_ = this.baseUrl + "/api/v1/Article/getUserFavorites?";
        if (pageIndex === null)
            throw new Error("The parameter 'pageIndex' cannot be null.");
        else if (pageIndex !== undefined)
            url_ += "PageIndex=" + encodeURIComponent("" + pageIndex) + "&"; 
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&"; 
        if (orderBy !== undefined)
            url_ += "OrderBy=" + encodeURIComponent("" + orderBy) + "&"; 
        if (isAscending === null)
            throw new Error("The parameter 'isAscending' cannot be null.");
        else if (isAscending !== undefined)
            url_ += "IsAscending=" + encodeURIComponent("" + isAscending) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGetUserFavorites(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUserFavorites(<any>response_);
                } catch (e) {
                    return <Observable<SwaggerResponse<RespWapperOfPagingDtoOfListItem2 | null>>><any>_observableThrow(e);
                }
            } else
                return <Observable<SwaggerResponse<RespWapperOfPagingDtoOfListItem2 | null>>><any>_observableThrow(response_);
        }));
    }

    protected processGetUserFavorites(response: HttpResponseBase): Observable<SwaggerResponse<RespWapperOfPagingDtoOfListItem2 | null>> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RespWapperOfPagingDtoOfListItem2.fromJS(resultData200) : <any>null;
            return _observableOf(new SwaggerResponse(status, _headers, result200));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<RespWapperOfPagingDtoOfListItem2 | null>>(new SwaggerResponse(status, _headers, <any>null));
    }
}

@Injectable({
    providedIn: 'root'
})
export class AuthorizeService extends BaseClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super();
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://192.168.252.113:5000";
    }

    token(req: LoginReq): Observable<SwaggerResponse<RespWapperOfString | null>> {
        let url_ = this.baseUrl + "/api/v1/Authorize/token";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(req);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processToken(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processToken(<any>response_);
                } catch (e) {
                    return <Observable<SwaggerResponse<RespWapperOfString | null>>><any>_observableThrow(e);
                }
            } else
                return <Observable<SwaggerResponse<RespWapperOfString | null>>><any>_observableThrow(response_);
        }));
    }

    protected processToken(response: HttpResponseBase): Observable<SwaggerResponse<RespWapperOfString | null>> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RespWapperOfString.fromJS(resultData200) : <any>null;
            return _observableOf(new SwaggerResponse(status, _headers, result200));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<RespWapperOfString | null>>(new SwaggerResponse(status, _headers, <any>null));
    }
}

@Injectable({
    providedIn: 'root'
})
export class CategoryService extends BaseClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super();
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://192.168.252.113:5000";
    }

    all(): Observable<SwaggerResponse<RespWapperOfListOfCategroyNode | null>> {
        let url_ = this.baseUrl + "/api/v1/Category/all";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAll(<any>response_);
                } catch (e) {
                    return <Observable<SwaggerResponse<RespWapperOfListOfCategroyNode | null>>><any>_observableThrow(e);
                }
            } else
                return <Observable<SwaggerResponse<RespWapperOfListOfCategroyNode | null>>><any>_observableThrow(response_);
        }));
    }

    protected processAll(response: HttpResponseBase): Observable<SwaggerResponse<RespWapperOfListOfCategroyNode | null>> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RespWapperOfListOfCategroyNode.fromJS(resultData200) : <any>null;
            return _observableOf(new SwaggerResponse(status, _headers, result200));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<RespWapperOfListOfCategroyNode | null>>(new SwaggerResponse(status, _headers, <any>null));
    }

    getCategories(id?: string | null | undefined): Observable<SwaggerResponse<RespWapperOfListOfCategoryResp | null>> {
        let url_ = this.baseUrl + "/api/v1/Category?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGetCategories(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCategories(<any>response_);
                } catch (e) {
                    return <Observable<SwaggerResponse<RespWapperOfListOfCategoryResp | null>>><any>_observableThrow(e);
                }
            } else
                return <Observable<SwaggerResponse<RespWapperOfListOfCategoryResp | null>>><any>_observableThrow(response_);
        }));
    }

    protected processGetCategories(response: HttpResponseBase): Observable<SwaggerResponse<RespWapperOfListOfCategoryResp | null>> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RespWapperOfListOfCategoryResp.fromJS(resultData200) : <any>null;
            return _observableOf(new SwaggerResponse(status, _headers, result200));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<RespWapperOfListOfCategoryResp | null>>(new SwaggerResponse(status, _headers, <any>null));
    }

    addCategory(req: AddCategoryReq): Observable<SwaggerResponse<RespWapperOfCategoryResp | null>> {
        let url_ = this.baseUrl + "/api/v1/Category/add";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(req);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processAddCategory(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddCategory(<any>response_);
                } catch (e) {
                    return <Observable<SwaggerResponse<RespWapperOfCategoryResp | null>>><any>_observableThrow(e);
                }
            } else
                return <Observable<SwaggerResponse<RespWapperOfCategoryResp | null>>><any>_observableThrow(response_);
        }));
    }

    protected processAddCategory(response: HttpResponseBase): Observable<SwaggerResponse<RespWapperOfCategoryResp | null>> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RespWapperOfCategoryResp.fromJS(resultData200) : <any>null;
            return _observableOf(new SwaggerResponse(status, _headers, result200));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<RespWapperOfCategoryResp | null>>(new SwaggerResponse(status, _headers, <any>null));
    }

    enable(req: EnableReq): Observable<SwaggerResponse<RespWapperOfCategoryResp | null>> {
        let url_ = this.baseUrl + "/api/v1/Category/enable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(req);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("put", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processEnable(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEnable(<any>response_);
                } catch (e) {
                    return <Observable<SwaggerResponse<RespWapperOfCategoryResp | null>>><any>_observableThrow(e);
                }
            } else
                return <Observable<SwaggerResponse<RespWapperOfCategoryResp | null>>><any>_observableThrow(response_);
        }));
    }

    protected processEnable(response: HttpResponseBase): Observable<SwaggerResponse<RespWapperOfCategoryResp | null>> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RespWapperOfCategoryResp.fromJS(resultData200) : <any>null;
            return _observableOf(new SwaggerResponse(status, _headers, result200));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<RespWapperOfCategoryResp | null>>(new SwaggerResponse(status, _headers, <any>null));
    }
}

export class RespWapper implements IRespWapper {
    success!: boolean;
    errors?: ErrorDto[] | null;

    constructor(data?: IRespWapper) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.success = data["success"] !== undefined ? data["success"] : <any>null;
            if (data["errors"] && data["errors"].constructor === Array) {
                this.errors = [];
                for (let item of data["errors"])
                    this.errors.push(ErrorDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RespWapper {
        data = typeof data === 'object' ? data : {};
        let result = new RespWapper();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success !== undefined ? this.success : <any>null;
        if (this.errors && this.errors.constructor === Array) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IRespWapper {
    success: boolean;
    errors?: ErrorDto[] | null;
}

export class ErrorDto implements IErrorDto {
    code?: string | null;
    description?: string | null;

    constructor(data?: IErrorDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.code = data["code"] !== undefined ? data["code"] : <any>null;
            this.description = data["description"] !== undefined ? data["description"] : <any>null;
        }
    }

    static fromJS(data: any): ErrorDto {
        data = typeof data === 'object' ? data : {};
        let result = new ErrorDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code !== undefined ? this.code : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        return data; 
    }
}

export interface IErrorDto {
    code?: string | null;
    description?: string | null;
}

export class RegisterReq implements IRegisterReq {
    email!: string;
    nickname!: string;
    password!: string;

    constructor(data?: IRegisterReq) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.email = data["email"] !== undefined ? data["email"] : <any>null;
            this.nickname = data["nickname"] !== undefined ? data["nickname"] : <any>null;
            this.password = data["password"] !== undefined ? data["password"] : <any>null;
        }
    }

    static fromJS(data: any): RegisterReq {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterReq();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email !== undefined ? this.email : <any>null;
        data["nickname"] = this.nickname !== undefined ? this.nickname : <any>null;
        data["password"] = this.password !== undefined ? this.password : <any>null;
        return data; 
    }
}

export interface IRegisterReq {
    email: string;
    nickname: string;
    password: string;
}

export class RespWapperOfRegisterResp extends RespWapper implements IRespWapperOfRegisterResp {
    body?: RegisterResp | null;

    constructor(data?: IRespWapperOfRegisterResp) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.body = data["body"] ? RegisterResp.fromJS(data["body"]) : <any>null;
        }
    }

    static fromJS(data: any): RespWapperOfRegisterResp {
        data = typeof data === 'object' ? data : {};
        let result = new RespWapperOfRegisterResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["body"] = this.body ? this.body.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IRespWapperOfRegisterResp extends IRespWapper {
    body?: RegisterResp | null;
}

export class RegisterResp implements IRegisterResp {
    userId?: string | null;
    code?: string | null;

    constructor(data?: IRegisterResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userId = data["userId"] !== undefined ? data["userId"] : <any>null;
            this.code = data["code"] !== undefined ? data["code"] : <any>null;
        }
    }

    static fromJS(data: any): RegisterResp {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId !== undefined ? this.userId : <any>null;
        data["code"] = this.code !== undefined ? this.code : <any>null;
        return data; 
    }
}

export interface IRegisterResp {
    userId?: string | null;
    code?: string | null;
}

export class EmailConfirmReq implements IEmailConfirmReq {
    userId!: string;
    code!: string;

    constructor(data?: IEmailConfirmReq) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userId = data["userId"] !== undefined ? data["userId"] : <any>null;
            this.code = data["code"] !== undefined ? data["code"] : <any>null;
        }
    }

    static fromJS(data: any): EmailConfirmReq {
        data = typeof data === 'object' ? data : {};
        let result = new EmailConfirmReq();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId !== undefined ? this.userId : <any>null;
        data["code"] = this.code !== undefined ? this.code : <any>null;
        return data; 
    }
}

export interface IEmailConfirmReq {
    userId: string;
    code: string;
}

export class LoginReq implements ILoginReq {
    email!: string;
    password!: string;
    rememberMe!: boolean;

    constructor(data?: ILoginReq) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.email = data["email"] !== undefined ? data["email"] : <any>null;
            this.password = data["password"] !== undefined ? data["password"] : <any>null;
            this.rememberMe = data["rememberMe"] !== undefined ? data["rememberMe"] : <any>null;
        }
    }

    static fromJS(data: any): LoginReq {
        data = typeof data === 'object' ? data : {};
        let result = new LoginReq();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email !== undefined ? this.email : <any>null;
        data["password"] = this.password !== undefined ? this.password : <any>null;
        data["rememberMe"] = this.rememberMe !== undefined ? this.rememberMe : <any>null;
        return data; 
    }
}

export interface ILoginReq {
    email: string;
    password: string;
    rememberMe: boolean;
}

export class RespWapperOfProfileResp extends RespWapper implements IRespWapperOfProfileResp {
    body?: ProfileResp | null;

    constructor(data?: IRespWapperOfProfileResp) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.body = data["body"] ? ProfileResp.fromJS(data["body"]) : <any>null;
        }
    }

    static fromJS(data: any): RespWapperOfProfileResp {
        data = typeof data === 'object' ? data : {};
        let result = new RespWapperOfProfileResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["body"] = this.body ? this.body.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IRespWapperOfProfileResp extends IRespWapper {
    body?: ProfileResp | null;
}

export class EntityDtoOfString implements IEntityDtoOfString {
    id!: string;

    constructor(data?: IEntityDtoOfString) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
        }
    }

    static fromJS(data: any): EntityDtoOfString {
        data = typeof data === 'object' ? data : {};
        let result = new EntityDtoOfString();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        return data; 
    }
}

export interface IEntityDtoOfString {
    id: string;
}

export class ProfileResp extends EntityDtoOfString implements IProfileResp {
    nickname?: string | null;
    signature?: string | null;
    gender!: Gender;
    email?: string | null;
    city?: string | null;
    company?: string | null;
    joinDate!: Date;
    follows!: number;
    fans!: number;
    score!: number;
    isMuted!: boolean;

    constructor(data?: IProfileResp) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.nickname = data["nickname"] !== undefined ? data["nickname"] : <any>null;
            this.signature = data["signature"] !== undefined ? data["signature"] : <any>null;
            this.gender = data["gender"] !== undefined ? data["gender"] : <any>null;
            this.email = data["email"] !== undefined ? data["email"] : <any>null;
            this.city = data["city"] !== undefined ? data["city"] : <any>null;
            this.company = data["company"] !== undefined ? data["company"] : <any>null;
            this.joinDate = data["joinDate"] ? new Date(data["joinDate"].toString()) : <any>null;
            this.follows = data["follows"] !== undefined ? data["follows"] : <any>null;
            this.fans = data["fans"] !== undefined ? data["fans"] : <any>null;
            this.score = data["score"] !== undefined ? data["score"] : <any>null;
            this.isMuted = data["isMuted"] !== undefined ? data["isMuted"] : <any>null;
        }
    }

    static fromJS(data: any): ProfileResp {
        data = typeof data === 'object' ? data : {};
        let result = new ProfileResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["nickname"] = this.nickname !== undefined ? this.nickname : <any>null;
        data["signature"] = this.signature !== undefined ? this.signature : <any>null;
        data["gender"] = this.gender !== undefined ? this.gender : <any>null;
        data["email"] = this.email !== undefined ? this.email : <any>null;
        data["city"] = this.city !== undefined ? this.city : <any>null;
        data["company"] = this.company !== undefined ? this.company : <any>null;
        data["joinDate"] = this.joinDate ? this.joinDate.toISOString() : <any>null;
        data["follows"] = this.follows !== undefined ? this.follows : <any>null;
        data["fans"] = this.fans !== undefined ? this.fans : <any>null;
        data["score"] = this.score !== undefined ? this.score : <any>null;
        data["isMuted"] = this.isMuted !== undefined ? this.isMuted : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IProfileResp extends IEntityDtoOfString {
    nickname?: string | null;
    signature?: string | null;
    gender: Gender;
    email?: string | null;
    city?: string | null;
    company?: string | null;
    joinDate: Date;
    follows: number;
    fans: number;
    score: number;
    isMuted: boolean;
}

export enum Gender {
    Male = 0, 
    Female = 1, 
    Secret = -1, 
}

export class EditProfileReq extends EntityDtoOfString implements IEditProfileReq {
    gender!: Gender;
    company?: string | null;
    city?: string | null;
    signature?: string | null;

    constructor(data?: IEditProfileReq) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.gender = data["gender"] !== undefined ? data["gender"] : <any>null;
            this.company = data["company"] !== undefined ? data["company"] : <any>null;
            this.city = data["city"] !== undefined ? data["city"] : <any>null;
            this.signature = data["signature"] !== undefined ? data["signature"] : <any>null;
        }
    }

    static fromJS(data: any): EditProfileReq {
        data = typeof data === 'object' ? data : {};
        let result = new EditProfileReq();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["gender"] = this.gender !== undefined ? this.gender : <any>null;
        data["company"] = this.company !== undefined ? this.company : <any>null;
        data["city"] = this.city !== undefined ? this.city : <any>null;
        data["signature"] = this.signature !== undefined ? this.signature : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IEditProfileReq extends IEntityDtoOfString {
    gender: Gender;
    company?: string | null;
    city?: string | null;
    signature?: string | null;
}

export class RetrievePasswordReq implements IRetrievePasswordReq {
    email!: string;

    constructor(data?: IRetrievePasswordReq) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.email = data["email"] !== undefined ? data["email"] : <any>null;
        }
    }

    static fromJS(data: any): RetrievePasswordReq {
        data = typeof data === 'object' ? data : {};
        let result = new RetrievePasswordReq();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email !== undefined ? this.email : <any>null;
        return data; 
    }
}

export interface IRetrievePasswordReq {
    email: string;
}

export class ResetPasswordReq implements IResetPasswordReq {
    userId!: string;
    code!: string;
    password!: string;

    constructor(data?: IResetPasswordReq) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userId = data["userId"] !== undefined ? data["userId"] : <any>null;
            this.code = data["code"] !== undefined ? data["code"] : <any>null;
            this.password = data["password"] !== undefined ? data["password"] : <any>null;
        }
    }

    static fromJS(data: any): ResetPasswordReq {
        data = typeof data === 'object' ? data : {};
        let result = new ResetPasswordReq();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId !== undefined ? this.userId : <any>null;
        data["code"] = this.code !== undefined ? this.code : <any>null;
        data["password"] = this.password !== undefined ? this.password : <any>null;
        return data; 
    }
}

export interface IResetPasswordReq {
    userId: string;
    code: string;
    password: string;
}

export class RespWapperOfPagingDtoOfUserSimpleResp extends RespWapper implements IRespWapperOfPagingDtoOfUserSimpleResp {
    body?: PagingDtoOfUserSimpleResp | null;

    constructor(data?: IRespWapperOfPagingDtoOfUserSimpleResp) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.body = data["body"] ? PagingDtoOfUserSimpleResp.fromJS(data["body"]) : <any>null;
        }
    }

    static fromJS(data: any): RespWapperOfPagingDtoOfUserSimpleResp {
        data = typeof data === 'object' ? data : {};
        let result = new RespWapperOfPagingDtoOfUserSimpleResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["body"] = this.body ? this.body.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IRespWapperOfPagingDtoOfUserSimpleResp extends IRespWapper {
    body?: PagingDtoOfUserSimpleResp | null;
}

export class PagingDtoOfUserSimpleResp implements IPagingDtoOfUserSimpleResp {
    totalCount!: number;
    dtos?: UserSimpleResp[] | null;

    constructor(data?: IPagingDtoOfUserSimpleResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"] !== undefined ? data["totalCount"] : <any>null;
            if (data["dtos"] && data["dtos"].constructor === Array) {
                this.dtos = [];
                for (let item of data["dtos"])
                    this.dtos.push(UserSimpleResp.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagingDtoOfUserSimpleResp {
        data = typeof data === 'object' ? data : {};
        let result = new PagingDtoOfUserSimpleResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount !== undefined ? this.totalCount : <any>null;
        if (this.dtos && this.dtos.constructor === Array) {
            data["dtos"] = [];
            for (let item of this.dtos)
                data["dtos"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagingDtoOfUserSimpleResp {
    totalCount: number;
    dtos?: UserSimpleResp[] | null;
}

export class UserSimpleResp extends EntityDtoOfString implements IUserSimpleResp {
    nickname?: string | null;
    signature?: string | null;
    gender!: Gender;
    email?: string | null;
    city?: string | null;
    company?: string | null;
    joinDate!: Date;
    score!: number;

    constructor(data?: IUserSimpleResp) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.nickname = data["nickname"] !== undefined ? data["nickname"] : <any>null;
            this.signature = data["signature"] !== undefined ? data["signature"] : <any>null;
            this.gender = data["gender"] !== undefined ? data["gender"] : <any>null;
            this.email = data["email"] !== undefined ? data["email"] : <any>null;
            this.city = data["city"] !== undefined ? data["city"] : <any>null;
            this.company = data["company"] !== undefined ? data["company"] : <any>null;
            this.joinDate = data["joinDate"] ? new Date(data["joinDate"].toString()) : <any>null;
            this.score = data["score"] !== undefined ? data["score"] : <any>null;
        }
    }

    static fromJS(data: any): UserSimpleResp {
        data = typeof data === 'object' ? data : {};
        let result = new UserSimpleResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["nickname"] = this.nickname !== undefined ? this.nickname : <any>null;
        data["signature"] = this.signature !== undefined ? this.signature : <any>null;
        data["gender"] = this.gender !== undefined ? this.gender : <any>null;
        data["email"] = this.email !== undefined ? this.email : <any>null;
        data["city"] = this.city !== undefined ? this.city : <any>null;
        data["company"] = this.company !== undefined ? this.company : <any>null;
        data["joinDate"] = this.joinDate ? this.joinDate.toISOString() : <any>null;
        data["score"] = this.score !== undefined ? this.score : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IUserSimpleResp extends IEntityDtoOfString {
    nickname?: string | null;
    signature?: string | null;
    gender: Gender;
    email?: string | null;
    city?: string | null;
    company?: string | null;
    joinDate: Date;
    score: number;
}

export class RespWapperOfBoolean extends RespWapper implements IRespWapperOfBoolean {
    body!: boolean;

    constructor(data?: IRespWapperOfBoolean) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.body = data["body"] !== undefined ? data["body"] : <any>null;
        }
    }

    static fromJS(data: any): RespWapperOfBoolean {
        data = typeof data === 'object' ? data : {};
        let result = new RespWapperOfBoolean();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["body"] = this.body !== undefined ? this.body : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IRespWapperOfBoolean extends IRespWapper {
    body: boolean;
}

export class ModifyPasswordReq implements IModifyPasswordReq {
    password!: string;
    newPassword!: string;

    constructor(data?: IModifyPasswordReq) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.password = data["password"] !== undefined ? data["password"] : <any>null;
            this.newPassword = data["newPassword"] !== undefined ? data["newPassword"] : <any>null;
        }
    }

    static fromJS(data: any): ModifyPasswordReq {
        data = typeof data === 'object' ? data : {};
        let result = new ModifyPasswordReq();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["password"] = this.password !== undefined ? this.password : <any>null;
        data["newPassword"] = this.newPassword !== undefined ? this.newPassword : <any>null;
        return data; 
    }
}

export interface IModifyPasswordReq {
    password: string;
    newPassword: string;
}

export class RespWapperOfString extends RespWapper implements IRespWapperOfString {
    body?: string | null;

    constructor(data?: IRespWapperOfString) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.body = data["body"] !== undefined ? data["body"] : <any>null;
        }
    }

    static fromJS(data: any): RespWapperOfString {
        data = typeof data === 'object' ? data : {};
        let result = new RespWapperOfString();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["body"] = this.body !== undefined ? this.body : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IRespWapperOfString extends IRespWapper {
    body?: string | null;
}

export class RespWapperOfPagingDtoOfListItem extends RespWapper implements IRespWapperOfPagingDtoOfListItem {
    body?: PagingDtoOfListItem | null;

    constructor(data?: IRespWapperOfPagingDtoOfListItem) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.body = data["body"] ? PagingDtoOfListItem.fromJS(data["body"]) : <any>null;
        }
    }

    static fromJS(data: any): RespWapperOfPagingDtoOfListItem {
        data = typeof data === 'object' ? data : {};
        let result = new RespWapperOfPagingDtoOfListItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["body"] = this.body ? this.body.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IRespWapperOfPagingDtoOfListItem extends IRespWapper {
    body?: PagingDtoOfListItem | null;
}

export class PagingDtoOfListItem implements IPagingDtoOfListItem {
    totalCount!: number;
    dtos?: ListItem[] | null;

    constructor(data?: IPagingDtoOfListItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"] !== undefined ? data["totalCount"] : <any>null;
            if (data["dtos"] && data["dtos"].constructor === Array) {
                this.dtos = [];
                for (let item of data["dtos"])
                    this.dtos.push(ListItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagingDtoOfListItem {
        data = typeof data === 'object' ? data : {};
        let result = new PagingDtoOfListItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount !== undefined ? this.totalCount : <any>null;
        if (this.dtos && this.dtos.constructor === Array) {
            data["dtos"] = [];
            for (let item of this.dtos)
                data["dtos"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagingDtoOfListItem {
    totalCount: number;
    dtos?: ListItem[] | null;
}

export class ListItem extends EntityDtoOfString implements IListItem {
    nickname?: string | null;
    roleName?: string | null;
    email?: string | null;
    emailConfirmed!: boolean;
    joinDate!: Date;
    isMuted!: boolean;

    constructor(data?: IListItem) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.nickname = data["nickname"] !== undefined ? data["nickname"] : <any>null;
            this.roleName = data["roleName"] !== undefined ? data["roleName"] : <any>null;
            this.email = data["email"] !== undefined ? data["email"] : <any>null;
            this.emailConfirmed = data["emailConfirmed"] !== undefined ? data["emailConfirmed"] : <any>null;
            this.joinDate = data["joinDate"] ? new Date(data["joinDate"].toString()) : <any>null;
            this.isMuted = data["isMuted"] !== undefined ? data["isMuted"] : <any>null;
        }
    }

    static fromJS(data: any): ListItem {
        data = typeof data === 'object' ? data : {};
        let result = new ListItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["nickname"] = this.nickname !== undefined ? this.nickname : <any>null;
        data["roleName"] = this.roleName !== undefined ? this.roleName : <any>null;
        data["email"] = this.email !== undefined ? this.email : <any>null;
        data["emailConfirmed"] = this.emailConfirmed !== undefined ? this.emailConfirmed : <any>null;
        data["joinDate"] = this.joinDate ? this.joinDate.toISOString() : <any>null;
        data["isMuted"] = this.isMuted !== undefined ? this.isMuted : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IListItem extends IEntityDtoOfString {
    nickname?: string | null;
    roleName?: string | null;
    email?: string | null;
    emailConfirmed: boolean;
    joinDate: Date;
    isMuted: boolean;
}

export class RespWapperOfProfile extends RespWapper implements IRespWapperOfProfile {
    body?: Profile | null;

    constructor(data?: IRespWapperOfProfile) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.body = data["body"] ? Profile.fromJS(data["body"]) : <any>null;
        }
    }

    static fromJS(data: any): RespWapperOfProfile {
        data = typeof data === 'object' ? data : {};
        let result = new RespWapperOfProfile();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["body"] = this.body ? this.body.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IRespWapperOfProfile extends IRespWapper {
    body?: Profile | null;
}

export class EntityDtoOfGuid implements IEntityDtoOfGuid {
    id!: string;

    constructor(data?: IEntityDtoOfGuid) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
        }
    }

    static fromJS(data: any): EntityDtoOfGuid {
        data = typeof data === 'object' ? data : {};
        let result = new EntityDtoOfGuid();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        return data; 
    }
}

export interface IEntityDtoOfGuid {
    id: string;
}

export class Profile extends EntityDtoOfGuid implements IProfile {
    name?: string | null;
    version?: string | null;
    iconBase64?: string | null;
    description?: string | null;
    settings?: AppSettings[] | null;

    constructor(data?: IProfile) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.name = data["name"] !== undefined ? data["name"] : <any>null;
            this.version = data["version"] !== undefined ? data["version"] : <any>null;
            this.iconBase64 = data["iconBase64"] !== undefined ? data["iconBase64"] : <any>null;
            this.description = data["description"] !== undefined ? data["description"] : <any>null;
            if (data["settings"] && data["settings"].constructor === Array) {
                this.settings = [];
                for (let item of data["settings"])
                    this.settings.push(AppSettings.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Profile {
        data = typeof data === 'object' ? data : {};
        let result = new Profile();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["version"] = this.version !== undefined ? this.version : <any>null;
        data["iconBase64"] = this.iconBase64 !== undefined ? this.iconBase64 : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        if (this.settings && this.settings.constructor === Array) {
            data["settings"] = [];
            for (let item of this.settings)
                data["settings"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IProfile extends IEntityDtoOfGuid {
    name?: string | null;
    version?: string | null;
    iconBase64?: string | null;
    description?: string | null;
    settings?: AppSettings[] | null;
}

export class EntityDtoOfInt32 implements IEntityDtoOfInt32 {
    id!: number;

    constructor(data?: IEntityDtoOfInt32) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
        }
    }

    static fromJS(data: any): EntityDtoOfInt32 {
        data = typeof data === 'object' ? data : {};
        let result = new EntityDtoOfInt32();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        return data; 
    }
}

export interface IEntityDtoOfInt32 {
    id: number;
}

export class AppSettings extends EntityDtoOfInt32 implements IAppSettings {
    name?: string | null;
    type?: string | null;
    value?: string | null;
    description?: string | null;

    constructor(data?: IAppSettings) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.name = data["name"] !== undefined ? data["name"] : <any>null;
            this.type = data["type"] !== undefined ? data["type"] : <any>null;
            this.value = data["value"] !== undefined ? data["value"] : <any>null;
            this.description = data["description"] !== undefined ? data["description"] : <any>null;
        }
    }

    static fromJS(data: any): AppSettings {
        data = typeof data === 'object' ? data : {};
        let result = new AppSettings();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["type"] = this.type !== undefined ? this.type : <any>null;
        data["value"] = this.value !== undefined ? this.value : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAppSettings extends IEntityDtoOfInt32 {
    name?: string | null;
    type?: string | null;
    value?: string | null;
    description?: string | null;
}

export class UpdateSettingsReq extends EntityDtoOfGuid implements IUpdateSettingsReq {
    name!: string;
    version!: string;
    iconBase64?: string | null;
    description!: string;
    settings?: SettingReq[] | null;

    constructor(data?: IUpdateSettingsReq) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.name = data["name"] !== undefined ? data["name"] : <any>null;
            this.version = data["version"] !== undefined ? data["version"] : <any>null;
            this.iconBase64 = data["iconBase64"] !== undefined ? data["iconBase64"] : <any>null;
            this.description = data["description"] !== undefined ? data["description"] : <any>null;
            if (data["settings"] && data["settings"].constructor === Array) {
                this.settings = [];
                for (let item of data["settings"])
                    this.settings.push(SettingReq.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UpdateSettingsReq {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateSettingsReq();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["version"] = this.version !== undefined ? this.version : <any>null;
        data["iconBase64"] = this.iconBase64 !== undefined ? this.iconBase64 : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        if (this.settings && this.settings.constructor === Array) {
            data["settings"] = [];
            for (let item of this.settings)
                data["settings"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IUpdateSettingsReq extends IEntityDtoOfGuid {
    name: string;
    version: string;
    iconBase64?: string | null;
    description: string;
    settings?: SettingReq[] | null;
}

export class SettingReq implements ISettingReq {
    id!: number;
    value!: string;

    constructor(data?: ISettingReq) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
            this.value = data["value"] !== undefined ? data["value"] : <any>null;
        }
    }

    static fromJS(data: any): SettingReq {
        data = typeof data === 'object' ? data : {};
        let result = new SettingReq();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["value"] = this.value !== undefined ? this.value : <any>null;
        return data; 
    }
}

export interface ISettingReq {
    id: number;
    value: string;
}

export class RespWapperOfListOfValueTitlePairOfInt32 extends RespWapper implements IRespWapperOfListOfValueTitlePairOfInt32 {
    body?: ValueTitlePairOfInt32[] | null;

    constructor(data?: IRespWapperOfListOfValueTitlePairOfInt32) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["body"] && data["body"].constructor === Array) {
                this.body = [];
                for (let item of data["body"])
                    this.body.push(ValueTitlePairOfInt32.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RespWapperOfListOfValueTitlePairOfInt32 {
        data = typeof data === 'object' ? data : {};
        let result = new RespWapperOfListOfValueTitlePairOfInt32();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.body && this.body.constructor === Array) {
            data["body"] = [];
            for (let item of this.body)
                data["body"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IRespWapperOfListOfValueTitlePairOfInt32 extends IRespWapper {
    body?: ValueTitlePairOfInt32[] | null;
}

export class ValueTitlePairOfInt32 implements IValueTitlePairOfInt32 {
    value!: number;
    title?: string | null;

    constructor(data?: IValueTitlePairOfInt32) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.value = data["value"] !== undefined ? data["value"] : <any>null;
            this.title = data["title"] !== undefined ? data["title"] : <any>null;
        }
    }

    static fromJS(data: any): ValueTitlePairOfInt32 {
        data = typeof data === 'object' ? data : {};
        let result = new ValueTitlePairOfInt32();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value !== undefined ? this.value : <any>null;
        data["title"] = this.title !== undefined ? this.title : <any>null;
        return data; 
    }
}

export interface IValueTitlePairOfInt32 {
    value: number;
    title?: string | null;
}

export class RespWapperOfPagingDtoOfListItem2 extends RespWapper implements IRespWapperOfPagingDtoOfListItem2 {
    body?: PagingDtoOfListItem2 | null;

    constructor(data?: IRespWapperOfPagingDtoOfListItem2) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.body = data["body"] ? PagingDtoOfListItem2.fromJS(data["body"]) : <any>null;
        }
    }

    static fromJS(data: any): RespWapperOfPagingDtoOfListItem2 {
        data = typeof data === 'object' ? data : {};
        let result = new RespWapperOfPagingDtoOfListItem2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["body"] = this.body ? this.body.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IRespWapperOfPagingDtoOfListItem2 extends IRespWapper {
    body?: PagingDtoOfListItem2 | null;
}

export class PagingDtoOfListItem2 implements IPagingDtoOfListItem2 {
    totalCount!: number;
    dtos?: ListItem2[] | null;

    constructor(data?: IPagingDtoOfListItem2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"] !== undefined ? data["totalCount"] : <any>null;
            if (data["dtos"] && data["dtos"].constructor === Array) {
                this.dtos = [];
                for (let item of data["dtos"])
                    this.dtos.push(ListItem2.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagingDtoOfListItem2 {
        data = typeof data === 'object' ? data : {};
        let result = new PagingDtoOfListItem2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount !== undefined ? this.totalCount : <any>null;
        if (this.dtos && this.dtos.constructor === Array) {
            data["dtos"] = [];
            for (let item of this.dtos)
                data["dtos"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagingDtoOfListItem2 {
    totalCount: number;
    dtos?: ListItem2[] | null;
}

export class ListItem2 extends EntityDtoOfGuid implements IListItem2 {
    title?: string | null;
    keywords?: string | null;
    category?: string | null;
    stateId!: number;
    state?: string | null;
    typeId!: number;
    type?: string | null;
    likes!: number;
    dislikes!: number;
    pv!: number;
    creatorId?: string | null;
    creatorNick?: string | null;
    creationTime!: Date;
    replies!: number;
    summary?: string | null;

    constructor(data?: IListItem2) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.title = data["title"] !== undefined ? data["title"] : <any>null;
            this.keywords = data["keywords"] !== undefined ? data["keywords"] : <any>null;
            this.category = data["category"] !== undefined ? data["category"] : <any>null;
            this.stateId = data["stateId"] !== undefined ? data["stateId"] : <any>null;
            this.state = data["state"] !== undefined ? data["state"] : <any>null;
            this.typeId = data["typeId"] !== undefined ? data["typeId"] : <any>null;
            this.type = data["type"] !== undefined ? data["type"] : <any>null;
            this.likes = data["likes"] !== undefined ? data["likes"] : <any>null;
            this.dislikes = data["dislikes"] !== undefined ? data["dislikes"] : <any>null;
            this.pv = data["pv"] !== undefined ? data["pv"] : <any>null;
            this.creatorId = data["creatorId"] !== undefined ? data["creatorId"] : <any>null;
            this.creatorNick = data["creatorNick"] !== undefined ? data["creatorNick"] : <any>null;
            this.creationTime = data["creationTime"] ? new Date(data["creationTime"].toString()) : <any>null;
            this.replies = data["replies"] !== undefined ? data["replies"] : <any>null;
            this.summary = data["summary"] !== undefined ? data["summary"] : <any>null;
        }
    }

    static fromJS(data: any): ListItem2 {
        data = typeof data === 'object' ? data : {};
        let result = new ListItem2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title !== undefined ? this.title : <any>null;
        data["keywords"] = this.keywords !== undefined ? this.keywords : <any>null;
        data["category"] = this.category !== undefined ? this.category : <any>null;
        data["stateId"] = this.stateId !== undefined ? this.stateId : <any>null;
        data["state"] = this.state !== undefined ? this.state : <any>null;
        data["typeId"] = this.typeId !== undefined ? this.typeId : <any>null;
        data["type"] = this.type !== undefined ? this.type : <any>null;
        data["likes"] = this.likes !== undefined ? this.likes : <any>null;
        data["dislikes"] = this.dislikes !== undefined ? this.dislikes : <any>null;
        data["pv"] = this.pv !== undefined ? this.pv : <any>null;
        data["creatorId"] = this.creatorId !== undefined ? this.creatorId : <any>null;
        data["creatorNick"] = this.creatorNick !== undefined ? this.creatorNick : <any>null;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>null;
        data["replies"] = this.replies !== undefined ? this.replies : <any>null;
        data["summary"] = this.summary !== undefined ? this.summary : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IListItem2 extends IEntityDtoOfGuid {
    title?: string | null;
    keywords?: string | null;
    category?: string | null;
    stateId: number;
    state?: string | null;
    typeId: number;
    type?: string | null;
    likes: number;
    dislikes: number;
    pv: number;
    creatorId?: string | null;
    creatorNick?: string | null;
    creationTime: Date;
    replies: number;
    summary?: string | null;
}

export enum ArticleState {
    Draft = 1, 
    Auditing = 2, 
    Rejected = 4, 
    Published = 8, 
    UnSolved = 16, 
    Solved = 32, 
    Unsatisfactory = 64, 
    Deleted = 128, 
}

export enum ArticleType {
    Question = 1, 
    Article = 2, 
}

export class RespWapperOfGuid extends RespWapper implements IRespWapperOfGuid {
    body!: string;

    constructor(data?: IRespWapperOfGuid) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.body = data["body"] !== undefined ? data["body"] : <any>null;
        }
    }

    static fromJS(data: any): RespWapperOfGuid {
        data = typeof data === 'object' ? data : {};
        let result = new RespWapperOfGuid();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["body"] = this.body !== undefined ? this.body : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IRespWapperOfGuid extends IRespWapper {
    body: string;
}

export class AddArticleReq implements IAddArticleReq {
    title!: string;
    summary!: string;
    keywords!: string;
    content!: string;
    categoryId!: string;
    canComment!: boolean;

    constructor(data?: IAddArticleReq) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.title = data["title"] !== undefined ? data["title"] : <any>null;
            this.summary = data["summary"] !== undefined ? data["summary"] : <any>null;
            this.keywords = data["keywords"] !== undefined ? data["keywords"] : <any>null;
            this.content = data["content"] !== undefined ? data["content"] : <any>null;
            this.categoryId = data["categoryId"] !== undefined ? data["categoryId"] : <any>null;
            this.canComment = data["canComment"] !== undefined ? data["canComment"] : <any>null;
        }
    }

    static fromJS(data: any): AddArticleReq {
        data = typeof data === 'object' ? data : {};
        let result = new AddArticleReq();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title !== undefined ? this.title : <any>null;
        data["summary"] = this.summary !== undefined ? this.summary : <any>null;
        data["keywords"] = this.keywords !== undefined ? this.keywords : <any>null;
        data["content"] = this.content !== undefined ? this.content : <any>null;
        data["categoryId"] = this.categoryId !== undefined ? this.categoryId : <any>null;
        data["canComment"] = this.canComment !== undefined ? this.canComment : <any>null;
        return data; 
    }
}

export interface IAddArticleReq {
    title: string;
    summary: string;
    keywords: string;
    content: string;
    categoryId: string;
    canComment: boolean;
}

export class AddQuestionReq implements IAddQuestionReq {
    title!: string;
    keywords!: string;
    content!: string;
    categoryId!: string;
    score!: number;

    constructor(data?: IAddQuestionReq) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.title = data["title"] !== undefined ? data["title"] : <any>null;
            this.keywords = data["keywords"] !== undefined ? data["keywords"] : <any>null;
            this.content = data["content"] !== undefined ? data["content"] : <any>null;
            this.categoryId = data["categoryId"] !== undefined ? data["categoryId"] : <any>null;
            this.score = data["score"] !== undefined ? data["score"] : <any>null;
        }
    }

    static fromJS(data: any): AddQuestionReq {
        data = typeof data === 'object' ? data : {};
        let result = new AddQuestionReq();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title !== undefined ? this.title : <any>null;
        data["keywords"] = this.keywords !== undefined ? this.keywords : <any>null;
        data["content"] = this.content !== undefined ? this.content : <any>null;
        data["categoryId"] = this.categoryId !== undefined ? this.categoryId : <any>null;
        data["score"] = this.score !== undefined ? this.score : <any>null;
        return data; 
    }
}

export interface IAddQuestionReq {
    title: string;
    keywords: string;
    content: string;
    categoryId: string;
    score: number;
}

export class RespWapperOfArticleResp extends RespWapper implements IRespWapperOfArticleResp {
    body?: ArticleResp | null;

    constructor(data?: IRespWapperOfArticleResp) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.body = data["body"] ? ArticleResp.fromJS(data["body"]) : <any>null;
        }
    }

    static fromJS(data: any): RespWapperOfArticleResp {
        data = typeof data === 'object' ? data : {};
        let result = new RespWapperOfArticleResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["body"] = this.body ? this.body.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IRespWapperOfArticleResp extends IRespWapper {
    body?: ArticleResp | null;
}

export class ArticleResp extends EntityDtoOfGuid implements IArticleResp {
    title?: string | null;
    summary?: string | null;
    content?: string | null;
    keywords?: string | null;
    typeId!: ArticleType;
    stateId!: ArticleState;
    state?: string | null;
    canComment!: boolean;
    likes!: number;
    dislikes!: number;
    pv!: number;
    creatorId?: string | null;
    creatorNick?: string | null;
    creationTime!: Date;
    score!: number;
    adoptId?: string | null;
    replies!: number;
    category?: string | null;

    constructor(data?: IArticleResp) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.title = data["title"] !== undefined ? data["title"] : <any>null;
            this.summary = data["summary"] !== undefined ? data["summary"] : <any>null;
            this.content = data["content"] !== undefined ? data["content"] : <any>null;
            this.keywords = data["keywords"] !== undefined ? data["keywords"] : <any>null;
            this.typeId = data["typeId"] !== undefined ? data["typeId"] : <any>null;
            this.stateId = data["stateId"] !== undefined ? data["stateId"] : <any>null;
            this.state = data["state"] !== undefined ? data["state"] : <any>null;
            this.canComment = data["canComment"] !== undefined ? data["canComment"] : <any>null;
            this.likes = data["likes"] !== undefined ? data["likes"] : <any>null;
            this.dislikes = data["dislikes"] !== undefined ? data["dislikes"] : <any>null;
            this.pv = data["pv"] !== undefined ? data["pv"] : <any>null;
            this.creatorId = data["creatorId"] !== undefined ? data["creatorId"] : <any>null;
            this.creatorNick = data["creatorNick"] !== undefined ? data["creatorNick"] : <any>null;
            this.creationTime = data["creationTime"] ? new Date(data["creationTime"].toString()) : <any>null;
            this.score = data["score"] !== undefined ? data["score"] : <any>null;
            this.adoptId = data["adoptId"] !== undefined ? data["adoptId"] : <any>null;
            this.replies = data["replies"] !== undefined ? data["replies"] : <any>null;
            this.category = data["category"] !== undefined ? data["category"] : <any>null;
        }
    }

    static fromJS(data: any): ArticleResp {
        data = typeof data === 'object' ? data : {};
        let result = new ArticleResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title !== undefined ? this.title : <any>null;
        data["summary"] = this.summary !== undefined ? this.summary : <any>null;
        data["content"] = this.content !== undefined ? this.content : <any>null;
        data["keywords"] = this.keywords !== undefined ? this.keywords : <any>null;
        data["typeId"] = this.typeId !== undefined ? this.typeId : <any>null;
        data["stateId"] = this.stateId !== undefined ? this.stateId : <any>null;
        data["state"] = this.state !== undefined ? this.state : <any>null;
        data["canComment"] = this.canComment !== undefined ? this.canComment : <any>null;
        data["likes"] = this.likes !== undefined ? this.likes : <any>null;
        data["dislikes"] = this.dislikes !== undefined ? this.dislikes : <any>null;
        data["pv"] = this.pv !== undefined ? this.pv : <any>null;
        data["creatorId"] = this.creatorId !== undefined ? this.creatorId : <any>null;
        data["creatorNick"] = this.creatorNick !== undefined ? this.creatorNick : <any>null;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>null;
        data["score"] = this.score !== undefined ? this.score : <any>null;
        data["adoptId"] = this.adoptId !== undefined ? this.adoptId : <any>null;
        data["replies"] = this.replies !== undefined ? this.replies : <any>null;
        data["category"] = this.category !== undefined ? this.category : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IArticleResp extends IEntityDtoOfGuid {
    title?: string | null;
    summary?: string | null;
    content?: string | null;
    keywords?: string | null;
    typeId: ArticleType;
    stateId: ArticleState;
    state?: string | null;
    canComment: boolean;
    likes: number;
    dislikes: number;
    pv: number;
    creatorId?: string | null;
    creatorNick?: string | null;
    creationTime: Date;
    score: number;
    adoptId?: string | null;
    replies: number;
    category?: string | null;
}

export class RespWapperOfPagingDtoOfCommentItem extends RespWapper implements IRespWapperOfPagingDtoOfCommentItem {
    body?: PagingDtoOfCommentItem | null;

    constructor(data?: IRespWapperOfPagingDtoOfCommentItem) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.body = data["body"] ? PagingDtoOfCommentItem.fromJS(data["body"]) : <any>null;
        }
    }

    static fromJS(data: any): RespWapperOfPagingDtoOfCommentItem {
        data = typeof data === 'object' ? data : {};
        let result = new RespWapperOfPagingDtoOfCommentItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["body"] = this.body ? this.body.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IRespWapperOfPagingDtoOfCommentItem extends IRespWapper {
    body?: PagingDtoOfCommentItem | null;
}

export class PagingDtoOfCommentItem implements IPagingDtoOfCommentItem {
    totalCount!: number;
    dtos?: CommentItem[] | null;

    constructor(data?: IPagingDtoOfCommentItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"] !== undefined ? data["totalCount"] : <any>null;
            if (data["dtos"] && data["dtos"].constructor === Array) {
                this.dtos = [];
                for (let item of data["dtos"])
                    this.dtos.push(CommentItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagingDtoOfCommentItem {
        data = typeof data === 'object' ? data : {};
        let result = new PagingDtoOfCommentItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount !== undefined ? this.totalCount : <any>null;
        if (this.dtos && this.dtos.constructor === Array) {
            data["dtos"] = [];
            for (let item of this.dtos)
                data["dtos"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagingDtoOfCommentItem {
    totalCount: number;
    dtos?: CommentItem[] | null;
}

export class EntityDtoOfInt64 implements IEntityDtoOfInt64 {
    id!: number;

    constructor(data?: IEntityDtoOfInt64) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
        }
    }

    static fromJS(data: any): EntityDtoOfInt64 {
        data = typeof data === 'object' ? data : {};
        let result = new EntityDtoOfInt64();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        return data; 
    }
}

export interface IEntityDtoOfInt64 {
    id: number;
}

export class CommentItem extends EntityDtoOfInt64 implements ICommentItem {
    parentId?: number | null;
    content?: string | null;
    likes!: number;
    dislikes!: number;
    creatorNick?: string | null;
    creationTime!: Date;
    creatorId?: string | null;

    constructor(data?: ICommentItem) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.parentId = data["parentId"] !== undefined ? data["parentId"] : <any>null;
            this.content = data["content"] !== undefined ? data["content"] : <any>null;
            this.likes = data["likes"] !== undefined ? data["likes"] : <any>null;
            this.dislikes = data["dislikes"] !== undefined ? data["dislikes"] : <any>null;
            this.creatorNick = data["creatorNick"] !== undefined ? data["creatorNick"] : <any>null;
            this.creationTime = data["creationTime"] ? new Date(data["creationTime"].toString()) : <any>null;
            this.creatorId = data["creatorId"] !== undefined ? data["creatorId"] : <any>null;
        }
    }

    static fromJS(data: any): CommentItem {
        data = typeof data === 'object' ? data : {};
        let result = new CommentItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["parentId"] = this.parentId !== undefined ? this.parentId : <any>null;
        data["content"] = this.content !== undefined ? this.content : <any>null;
        data["likes"] = this.likes !== undefined ? this.likes : <any>null;
        data["dislikes"] = this.dislikes !== undefined ? this.dislikes : <any>null;
        data["creatorNick"] = this.creatorNick !== undefined ? this.creatorNick : <any>null;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>null;
        data["creatorId"] = this.creatorId !== undefined ? this.creatorId : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface ICommentItem extends IEntityDtoOfInt64 {
    parentId?: number | null;
    content?: string | null;
    likes: number;
    dislikes: number;
    creatorNick?: string | null;
    creationTime: Date;
    creatorId?: string | null;
}

export class EditQuestionReq extends EntityDtoOfGuid implements IEditQuestionReq {
    keywords!: string;
    content!: string;

    constructor(data?: IEditQuestionReq) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.keywords = data["keywords"] !== undefined ? data["keywords"] : <any>null;
            this.content = data["content"] !== undefined ? data["content"] : <any>null;
        }
    }

    static fromJS(data: any): EditQuestionReq {
        data = typeof data === 'object' ? data : {};
        let result = new EditQuestionReq();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["keywords"] = this.keywords !== undefined ? this.keywords : <any>null;
        data["content"] = this.content !== undefined ? this.content : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IEditQuestionReq extends IEntityDtoOfGuid {
    keywords: string;
    content: string;
}

export class EditArticleReq extends EntityDtoOfGuid implements IEditArticleReq {
    summary!: string;
    keywords!: string;
    content!: string;
    canComment!: boolean;

    constructor(data?: IEditArticleReq) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.summary = data["summary"] !== undefined ? data["summary"] : <any>null;
            this.keywords = data["keywords"] !== undefined ? data["keywords"] : <any>null;
            this.content = data["content"] !== undefined ? data["content"] : <any>null;
            this.canComment = data["canComment"] !== undefined ? data["canComment"] : <any>null;
        }
    }

    static fromJS(data: any): EditArticleReq {
        data = typeof data === 'object' ? data : {};
        let result = new EditArticleReq();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["summary"] = this.summary !== undefined ? this.summary : <any>null;
        data["keywords"] = this.keywords !== undefined ? this.keywords : <any>null;
        data["content"] = this.content !== undefined ? this.content : <any>null;
        data["canComment"] = this.canComment !== undefined ? this.canComment : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IEditArticleReq extends IEntityDtoOfGuid {
    summary: string;
    keywords: string;
    content: string;
    canComment: boolean;
}

export class EditCanCommentReq extends EntityDtoOfGuid implements IEditCanCommentReq {
    canComment!: boolean;

    constructor(data?: IEditCanCommentReq) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.canComment = data["canComment"] !== undefined ? data["canComment"] : <any>null;
        }
    }

    static fromJS(data: any): EditCanCommentReq {
        data = typeof data === 'object' ? data : {};
        let result = new EditCanCommentReq();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["canComment"] = this.canComment !== undefined ? this.canComment : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IEditCanCommentReq extends IEntityDtoOfGuid {
    canComment: boolean;
}

export class TopArticleReq extends EntityDtoOfGuid implements ITopArticleReq {
    isForever!: boolean;
    expirationTime?: Date | null;

    constructor(data?: ITopArticleReq) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.isForever = data["isForever"] !== undefined ? data["isForever"] : <any>null;
            this.expirationTime = data["expirationTime"] ? new Date(data["expirationTime"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): TopArticleReq {
        data = typeof data === 'object' ? data : {};
        let result = new TopArticleReq();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isForever"] = this.isForever !== undefined ? this.isForever : <any>null;
        data["expirationTime"] = this.expirationTime ? this.expirationTime.toISOString() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface ITopArticleReq extends IEntityDtoOfGuid {
    isForever: boolean;
    expirationTime?: Date | null;
}

export class RespWapperOfLikeOrNotResp extends RespWapper implements IRespWapperOfLikeOrNotResp {
    body?: LikeOrNotResp | null;

    constructor(data?: IRespWapperOfLikeOrNotResp) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.body = data["body"] ? LikeOrNotResp.fromJS(data["body"]) : <any>null;
        }
    }

    static fromJS(data: any): RespWapperOfLikeOrNotResp {
        data = typeof data === 'object' ? data : {};
        let result = new RespWapperOfLikeOrNotResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["body"] = this.body ? this.body.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IRespWapperOfLikeOrNotResp extends IRespWapper {
    body?: LikeOrNotResp | null;
}

export class LikeOrNotResp implements ILikeOrNotResp {
    likes!: number;
    dislikes!: number;

    constructor(data?: ILikeOrNotResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.likes = data["likes"] !== undefined ? data["likes"] : <any>null;
            this.dislikes = data["dislikes"] !== undefined ? data["dislikes"] : <any>null;
        }
    }

    static fromJS(data: any): LikeOrNotResp {
        data = typeof data === 'object' ? data : {};
        let result = new LikeOrNotResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["likes"] = this.likes !== undefined ? this.likes : <any>null;
        data["dislikes"] = this.dislikes !== undefined ? this.dislikes : <any>null;
        return data; 
    }
}

export interface ILikeOrNotResp {
    likes: number;
    dislikes: number;
}

export class RespWapperOfCommentItem extends RespWapper implements IRespWapperOfCommentItem {
    body?: CommentItem | null;

    constructor(data?: IRespWapperOfCommentItem) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.body = data["body"] ? CommentItem.fromJS(data["body"]) : <any>null;
        }
    }

    static fromJS(data: any): RespWapperOfCommentItem {
        data = typeof data === 'object' ? data : {};
        let result = new RespWapperOfCommentItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["body"] = this.body ? this.body.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IRespWapperOfCommentItem extends IRespWapper {
    body?: CommentItem | null;
}

export class ReplyArticleReq implements IReplyArticleReq {
    articleId!: string;
    content!: string;

    constructor(data?: IReplyArticleReq) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.articleId = data["articleId"] !== undefined ? data["articleId"] : <any>null;
            this.content = data["content"] !== undefined ? data["content"] : <any>null;
        }
    }

    static fromJS(data: any): ReplyArticleReq {
        data = typeof data === 'object' ? data : {};
        let result = new ReplyArticleReq();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["articleId"] = this.articleId !== undefined ? this.articleId : <any>null;
        data["content"] = this.content !== undefined ? this.content : <any>null;
        return data; 
    }
}

export interface IReplyArticleReq {
    articleId: string;
    content: string;
}

export class ReplyCommentReq implements IReplyCommentReq {
    articleId!: string;
    commentId!: number;
    content!: string;

    constructor(data?: IReplyCommentReq) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.articleId = data["articleId"] !== undefined ? data["articleId"] : <any>null;
            this.commentId = data["commentId"] !== undefined ? data["commentId"] : <any>null;
            this.content = data["content"] !== undefined ? data["content"] : <any>null;
        }
    }

    static fromJS(data: any): ReplyCommentReq {
        data = typeof data === 'object' ? data : {};
        let result = new ReplyCommentReq();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["articleId"] = this.articleId !== undefined ? this.articleId : <any>null;
        data["commentId"] = this.commentId !== undefined ? this.commentId : <any>null;
        data["content"] = this.content !== undefined ? this.content : <any>null;
        return data; 
    }
}

export interface IReplyCommentReq {
    articleId: string;
    commentId: number;
    content: string;
}

export class FinishReq extends EntityDtoOfGuid implements IFinishReq {
    unsatisfactory!: boolean;
    adoptId?: number | null;

    constructor(data?: IFinishReq) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.unsatisfactory = data["unsatisfactory"] !== undefined ? data["unsatisfactory"] : <any>null;
            this.adoptId = data["adoptId"] !== undefined ? data["adoptId"] : <any>null;
        }
    }

    static fromJS(data: any): FinishReq {
        data = typeof data === 'object' ? data : {};
        let result = new FinishReq();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["unsatisfactory"] = this.unsatisfactory !== undefined ? this.unsatisfactory : <any>null;
        data["adoptId"] = this.adoptId !== undefined ? this.adoptId : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IFinishReq extends IEntityDtoOfGuid {
    unsatisfactory: boolean;
    adoptId?: number | null;
}

export class RespWapperOfListOfCategroyNode extends RespWapper implements IRespWapperOfListOfCategroyNode {
    body?: CategroyNode[] | null;

    constructor(data?: IRespWapperOfListOfCategroyNode) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["body"] && data["body"].constructor === Array) {
                this.body = [];
                for (let item of data["body"])
                    this.body.push(CategroyNode.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RespWapperOfListOfCategroyNode {
        data = typeof data === 'object' ? data : {};
        let result = new RespWapperOfListOfCategroyNode();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.body && this.body.constructor === Array) {
            data["body"] = [];
            for (let item of this.body)
                data["body"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IRespWapperOfListOfCategroyNode extends IRespWapper {
    body?: CategroyNode[] | null;
}

export class CategroyNode implements ICategroyNode {
    key!: string;
    parentId?: string | null;
    value?: any | null;
    title?: string | null;
    enable!: boolean;
    description?: string | null;
    isLeaf!: boolean;
    children?: CategroyNode[] | null;

    constructor(data?: ICategroyNode) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.key = data["key"] !== undefined ? data["key"] : <any>null;
            this.parentId = data["parentId"] !== undefined ? data["parentId"] : <any>null;
            this.value = data["value"] !== undefined ? data["value"] : <any>null;
            this.title = data["title"] !== undefined ? data["title"] : <any>null;
            this.enable = data["enable"] !== undefined ? data["enable"] : <any>null;
            this.description = data["description"] !== undefined ? data["description"] : <any>null;
            this.isLeaf = data["isLeaf"] !== undefined ? data["isLeaf"] : <any>null;
            if (data["children"] && data["children"].constructor === Array) {
                this.children = [];
                for (let item of data["children"])
                    this.children.push(CategroyNode.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CategroyNode {
        data = typeof data === 'object' ? data : {};
        let result = new CategroyNode();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["key"] = this.key !== undefined ? this.key : <any>null;
        data["parentId"] = this.parentId !== undefined ? this.parentId : <any>null;
        data["value"] = this.value !== undefined ? this.value : <any>null;
        data["title"] = this.title !== undefined ? this.title : <any>null;
        data["enable"] = this.enable !== undefined ? this.enable : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["isLeaf"] = this.isLeaf !== undefined ? this.isLeaf : <any>null;
        if (this.children && this.children.constructor === Array) {
            data["children"] = [];
            for (let item of this.children)
                data["children"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICategroyNode {
    key: string;
    parentId?: string | null;
    value?: any | null;
    title?: string | null;
    enable: boolean;
    description?: string | null;
    isLeaf: boolean;
    children?: CategroyNode[] | null;
}

export class RespWapperOfListOfCategoryResp extends RespWapper implements IRespWapperOfListOfCategoryResp {
    body?: CategoryResp[] | null;

    constructor(data?: IRespWapperOfListOfCategoryResp) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["body"] && data["body"].constructor === Array) {
                this.body = [];
                for (let item of data["body"])
                    this.body.push(CategoryResp.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RespWapperOfListOfCategoryResp {
        data = typeof data === 'object' ? data : {};
        let result = new RespWapperOfListOfCategoryResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.body && this.body.constructor === Array) {
            data["body"] = [];
            for (let item of this.body)
                data["body"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IRespWapperOfListOfCategoryResp extends IRespWapper {
    body?: CategoryResp[] | null;
}

export class CategoryResp extends EntityDtoOfGuid implements ICategoryResp {
    parentId?: string | null;
    name?: string | null;
    description?: string | null;
    enable!: boolean;
    children?: CategoryResp[] | null;

    constructor(data?: ICategoryResp) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.parentId = data["parentId"] !== undefined ? data["parentId"] : <any>null;
            this.name = data["name"] !== undefined ? data["name"] : <any>null;
            this.description = data["description"] !== undefined ? data["description"] : <any>null;
            this.enable = data["enable"] !== undefined ? data["enable"] : <any>null;
            if (data["children"] && data["children"].constructor === Array) {
                this.children = [];
                for (let item of data["children"])
                    this.children.push(CategoryResp.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CategoryResp {
        data = typeof data === 'object' ? data : {};
        let result = new CategoryResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["parentId"] = this.parentId !== undefined ? this.parentId : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["enable"] = this.enable !== undefined ? this.enable : <any>null;
        if (this.children && this.children.constructor === Array) {
            data["children"] = [];
            for (let item of this.children)
                data["children"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface ICategoryResp extends IEntityDtoOfGuid {
    parentId?: string | null;
    name?: string | null;
    description?: string | null;
    enable: boolean;
    children?: CategoryResp[] | null;
}

export class RespWapperOfCategoryResp extends RespWapper implements IRespWapperOfCategoryResp {
    body?: CategoryResp | null;

    constructor(data?: IRespWapperOfCategoryResp) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.body = data["body"] ? CategoryResp.fromJS(data["body"]) : <any>null;
        }
    }

    static fromJS(data: any): RespWapperOfCategoryResp {
        data = typeof data === 'object' ? data : {};
        let result = new RespWapperOfCategoryResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["body"] = this.body ? this.body.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IRespWapperOfCategoryResp extends IRespWapper {
    body?: CategoryResp | null;
}

export class AddCategoryReq implements IAddCategoryReq {
    parentId?: string | null;
    name!: string;
    description?: string | null;

    constructor(data?: IAddCategoryReq) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.parentId = data["parentId"] !== undefined ? data["parentId"] : <any>null;
            this.name = data["name"] !== undefined ? data["name"] : <any>null;
            this.description = data["description"] !== undefined ? data["description"] : <any>null;
        }
    }

    static fromJS(data: any): AddCategoryReq {
        data = typeof data === 'object' ? data : {};
        let result = new AddCategoryReq();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["parentId"] = this.parentId !== undefined ? this.parentId : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        return data; 
    }
}

export interface IAddCategoryReq {
    parentId?: string | null;
    name: string;
    description?: string | null;
}

export class EnableReq extends EntityDtoOfGuid implements IEnableReq {
    enable!: boolean;

    constructor(data?: IEnableReq) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.enable = data["enable"] !== undefined ? data["enable"] : <any>null;
        }
    }

    static fromJS(data: any): EnableReq {
        data = typeof data === 'object' ? data : {};
        let result = new EnableReq();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["enable"] = this.enable !== undefined ? this.enable : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IEnableReq extends IEntityDtoOfGuid {
    enable: boolean;
}

export class SwaggerResponse<TResult> {
    status: number;
    headers: { [key: string]: any; };
    result: TResult;
        
    constructor(status: number, headers: { [key: string]: any; }, result: TResult) 
    {
        this.status = status;
        this.headers = headers;
        this.result = result;
    }
}

export interface FileParameter {
    data: any;
    fileName: string;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if(result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader(); 
            reader.onload = event => { 
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob); 
        }
    });
}