/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.0.4.0 (NJsonSchema v9.12.7.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, from as _observableFrom, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';
import { BaseClient } from './BaseClient';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable({
    providedIn: 'root'
})
export class AccountService extends BaseClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super();
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:5000";
    }

    /**
     * 当前是否登录
     */
    isSignIn(): Observable<ApiResponse<FileResponse | null>> {
        let url_ = this.baseUrl + "/api/v1/Account/isSignIn";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processIsSignIn(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processIsSignIn(<any>response_);
                } catch (e) {
                    return <Observable<ApiResponse<FileResponse | null>>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApiResponse<FileResponse | null>>><any>_observableThrow(response_);
        }));
    }

    protected processIsSignIn(response: HttpResponseBase): Observable<ApiResponse<FileResponse | null>> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf(new ApiResponse(status, _headers, { fileName: fileName, data: <any>responseBlob, status: status, headers: _headers }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApiResponse<FileResponse | null>>(new ApiResponse(status, _headers, <any>null));
    }

    /**
     * 注册用户
     */
    register(req: RegisterReq): Observable<ApiResponse<FileResponse | null>> {
        let url_ = this.baseUrl + "/api/v1/Account/register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(req);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processRegister(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRegister(<any>response_);
                } catch (e) {
                    return <Observable<ApiResponse<FileResponse | null>>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApiResponse<FileResponse | null>>><any>_observableThrow(response_);
        }));
    }

    protected processRegister(response: HttpResponseBase): Observable<ApiResponse<FileResponse | null>> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf(new ApiResponse(status, _headers, { fileName: fileName, data: <any>responseBlob, status: status, headers: _headers }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApiResponse<FileResponse | null>>(new ApiResponse(status, _headers, <any>null));
    }

    /**
     * 邮箱确认
     */
    emailConfirm(req: EmailConfirmReq): Observable<ApiResponse<FileResponse | null>> {
        let url_ = this.baseUrl + "/api/v1/Account/emailConfirm";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(req);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processEmailConfirm(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEmailConfirm(<any>response_);
                } catch (e) {
                    return <Observable<ApiResponse<FileResponse | null>>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApiResponse<FileResponse | null>>><any>_observableThrow(response_);
        }));
    }

    protected processEmailConfirm(response: HttpResponseBase): Observable<ApiResponse<FileResponse | null>> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf(new ApiResponse(status, _headers, { fileName: fileName, data: <any>responseBlob, status: status, headers: _headers }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApiResponse<FileResponse | null>>(new ApiResponse(status, _headers, <any>null));
    }

    /**
     * 用户登录
     */
    login(req: LoginReq): Observable<ApiResponse<RespWapper | null>> {
        let url_ = this.baseUrl + "/api/v1/Account/login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(req);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processLogin(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLogin(<any>response_);
                } catch (e) {
                    return <Observable<ApiResponse<RespWapper | null>>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApiResponse<RespWapper | null>>><any>_observableThrow(response_);
        }));
    }

    protected processLogin(response: HttpResponseBase): Observable<ApiResponse<RespWapper | null>> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RespWapper.fromJS(resultData200) : <any>null;
            return _observableOf(new ApiResponse(status, _headers, result200));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApiResponse<RespWapper | null>>(new ApiResponse(status, _headers, <any>null));
    }

    /**
     * 用户信息
     * @param id (optional) 
     */
    profileGet(id?: string | null | undefined): Observable<ApiResponse<FileResponse | null>> {
        let url_ = this.baseUrl + "/api/v1/Account/profile?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processProfileGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processProfileGet(<any>response_);
                } catch (e) {
                    return <Observable<ApiResponse<FileResponse | null>>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApiResponse<FileResponse | null>>><any>_observableThrow(response_);
        }));
    }

    protected processProfileGet(response: HttpResponseBase): Observable<ApiResponse<FileResponse | null>> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf(new ApiResponse(status, _headers, { fileName: fileName, data: <any>responseBlob, status: status, headers: _headers }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApiResponse<FileResponse | null>>(new ApiResponse(status, _headers, <any>null));
    }

    /**
     * 更新个人信息
     */
    profilePut(req: EditProfileReq): Observable<ApiResponse<FileResponse | null>> {
        let url_ = this.baseUrl + "/api/v1/Account/profile";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(req);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("put", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processProfilePut(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processProfilePut(<any>response_);
                } catch (e) {
                    return <Observable<ApiResponse<FileResponse | null>>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApiResponse<FileResponse | null>>><any>_observableThrow(response_);
        }));
    }

    protected processProfilePut(response: HttpResponseBase): Observable<ApiResponse<FileResponse | null>> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf(new ApiResponse(status, _headers, { fileName: fileName, data: <any>responseBlob, status: status, headers: _headers }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApiResponse<FileResponse | null>>(new ApiResponse(status, _headers, <any>null));
    }

    /**
     * 找回密码
     */
    retrievePassword(req: RetrievePasswordReq): Observable<ApiResponse<FileResponse | null>> {
        let url_ = this.baseUrl + "/api/v1/Account/retrievePassword";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(req);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processRetrievePassword(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRetrievePassword(<any>response_);
                } catch (e) {
                    return <Observable<ApiResponse<FileResponse | null>>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApiResponse<FileResponse | null>>><any>_observableThrow(response_);
        }));
    }

    protected processRetrievePassword(response: HttpResponseBase): Observable<ApiResponse<FileResponse | null>> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf(new ApiResponse(status, _headers, { fileName: fileName, data: <any>responseBlob, status: status, headers: _headers }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApiResponse<FileResponse | null>>(new ApiResponse(status, _headers, <any>null));
    }

    /**
     * 重置密码
     */
    resetPassword(req: ResetPasswordReq): Observable<ApiResponse<FileResponse | null>> {
        let url_ = this.baseUrl + "/api/v1/Account/resetPassword";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(req);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processResetPassword(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processResetPassword(<any>response_);
                } catch (e) {
                    return <Observable<ApiResponse<FileResponse | null>>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApiResponse<FileResponse | null>>><any>_observableThrow(response_);
        }));
    }

    protected processResetPassword(response: HttpResponseBase): Observable<ApiResponse<FileResponse | null>> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf(new ApiResponse(status, _headers, { fileName: fileName, data: <any>responseBlob, status: status, headers: _headers }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApiResponse<FileResponse | null>>(new ApiResponse(status, _headers, <any>null));
    }

    /**
     * 关注用户
     */
    follow(req: FollowUserReq): Observable<ApiResponse<FileResponse | null>> {
        let url_ = this.baseUrl + "/api/v1/Account/follow";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(req);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processFollow(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processFollow(<any>response_);
                } catch (e) {
                    return <Observable<ApiResponse<FileResponse | null>>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApiResponse<FileResponse | null>>><any>_observableThrow(response_);
        }));
    }

    protected processFollow(response: HttpResponseBase): Observable<ApiResponse<FileResponse | null>> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf(new ApiResponse(status, _headers, { fileName: fileName, data: <any>responseBlob, status: status, headers: _headers }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApiResponse<FileResponse | null>>(new ApiResponse(status, _headers, <any>null));
    }

    /**
     * 取消关注用户
     */
    unfollow(req: UnFollowUserReq): Observable<ApiResponse<FileResponse | null>> {
        let url_ = this.baseUrl + "/api/v1/Account/unfollow";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(req);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processUnfollow(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUnfollow(<any>response_);
                } catch (e) {
                    return <Observable<ApiResponse<FileResponse | null>>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApiResponse<FileResponse | null>>><any>_observableThrow(response_);
        }));
    }

    protected processUnfollow(response: HttpResponseBase): Observable<ApiResponse<FileResponse | null>> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf(new ApiResponse(status, _headers, { fileName: fileName, data: <any>responseBlob, status: status, headers: _headers }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApiResponse<FileResponse | null>>(new ApiResponse(status, _headers, <any>null));
    }

    /**
     * 注销当前用户
     */
    logout(): Observable<ApiResponse<void>> {
        let url_ = this.baseUrl + "/api/v1/Account/logout";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processLogout(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLogout(<any>response_);
                } catch (e) {
                    return <Observable<ApiResponse<void>>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApiResponse<void>>><any>_observableThrow(response_);
        }));
    }

    protected processLogout(response: HttpResponseBase): Observable<ApiResponse<void>> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<ApiResponse<void>>(new ApiResponse(status, _headers, <any>null));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApiResponse<void>>(new ApiResponse(status, _headers, <any>null));
    }
}

@Injectable({
    providedIn: 'root'
})
export class AdminService extends BaseClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super();
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:5000";
    }

    /**
     * 搜索用户
     * @param nickname (optional) 
     * @param email (optional) 
     * @param isMuted (optional) 
     * @param isModerator (optional) 
     * @param pageIndex (optional) 
     * @param pageSize (optional) 
     * @param orderBy (optional) 
     * @param isAscending (optional) 
     */
    searchUsers(nickname?: string | null | undefined, email?: string | null | undefined, isMuted?: boolean | null | undefined, isModerator?: boolean | null | undefined, pageIndex?: number | undefined, pageSize?: number | undefined, orderBy?: string | null | undefined, isAscending?: boolean | undefined): Observable<ApiResponse<RespWapperOfPagingDtoOfListItem | null>> {
        let url_ = this.baseUrl + "/api/v1/Admin/searchUsers?";
        if (nickname !== undefined)
            url_ += "Nickname=" + encodeURIComponent("" + nickname) + "&"; 
        if (email !== undefined)
            url_ += "Email=" + encodeURIComponent("" + email) + "&"; 
        if (isMuted !== undefined)
            url_ += "IsMuted=" + encodeURIComponent("" + isMuted) + "&"; 
        if (isModerator !== undefined)
            url_ += "IsModerator=" + encodeURIComponent("" + isModerator) + "&"; 
        if (pageIndex === null)
            throw new Error("The parameter 'pageIndex' cannot be null.");
        else if (pageIndex !== undefined)
            url_ += "PageIndex=" + encodeURIComponent("" + pageIndex) + "&"; 
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&"; 
        if (orderBy !== undefined)
            url_ += "OrderBy=" + encodeURIComponent("" + orderBy) + "&"; 
        if (isAscending === null)
            throw new Error("The parameter 'isAscending' cannot be null.");
        else if (isAscending !== undefined)
            url_ += "IsAscending=" + encodeURIComponent("" + isAscending) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSearchUsers(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSearchUsers(<any>response_);
                } catch (e) {
                    return <Observable<ApiResponse<RespWapperOfPagingDtoOfListItem | null>>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApiResponse<RespWapperOfPagingDtoOfListItem | null>>><any>_observableThrow(response_);
        }));
    }

    protected processSearchUsers(response: HttpResponseBase): Observable<ApiResponse<RespWapperOfPagingDtoOfListItem | null>> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RespWapperOfPagingDtoOfListItem.fromJS(resultData200) : <any>null;
            return _observableOf(new ApiResponse(status, _headers, result200));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApiResponse<RespWapperOfPagingDtoOfListItem | null>>(new ApiResponse(status, _headers, <any>null));
    }

    /**
     * 屏蔽用户
     * @param id (optional) 
     */
    muteUser(id?: string | null | undefined): Observable<ApiResponse<RespWapper | null>> {
        let url_ = this.baseUrl + "/api/v1/Admin/muteUser?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processMuteUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processMuteUser(<any>response_);
                } catch (e) {
                    return <Observable<ApiResponse<RespWapper | null>>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApiResponse<RespWapper | null>>><any>_observableThrow(response_);
        }));
    }

    protected processMuteUser(response: HttpResponseBase): Observable<ApiResponse<RespWapper | null>> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RespWapper.fromJS(resultData200) : <any>null;
            return _observableOf(new ApiResponse(status, _headers, result200));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApiResponse<RespWapper | null>>(new ApiResponse(status, _headers, <any>null));
    }

    /**
     * 撤销屏蔽用户
     * @param id (optional) 
     */
    unmuteUser(id?: string | null | undefined): Observable<ApiResponse<FileResponse | null>> {
        let url_ = this.baseUrl + "/api/v1/Admin/unmuteUser?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("put", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processUnmuteUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUnmuteUser(<any>response_);
                } catch (e) {
                    return <Observable<ApiResponse<FileResponse | null>>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApiResponse<FileResponse | null>>><any>_observableThrow(response_);
        }));
    }

    protected processUnmuteUser(response: HttpResponseBase): Observable<ApiResponse<FileResponse | null>> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf(new ApiResponse(status, _headers, { fileName: fileName, data: <any>responseBlob, status: status, headers: _headers }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApiResponse<FileResponse | null>>(new ApiResponse(status, _headers, <any>null));
    }

    /**
     * 授权为版主
     */
    grantModerator(req: GrantModeratorReq): Observable<ApiResponse<FileResponse | null>> {
        let url_ = this.baseUrl + "/api/v1/Admin/grantModerator";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(req);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("put", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGrantModerator(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGrantModerator(<any>response_);
                } catch (e) {
                    return <Observable<ApiResponse<FileResponse | null>>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApiResponse<FileResponse | null>>><any>_observableThrow(response_);
        }));
    }

    protected processGrantModerator(response: HttpResponseBase): Observable<ApiResponse<FileResponse | null>> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf(new ApiResponse(status, _headers, { fileName: fileName, data: <any>responseBlob, status: status, headers: _headers }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApiResponse<FileResponse | null>>(new ApiResponse(status, _headers, <any>null));
    }
}

@Injectable({
    providedIn: 'root'
})
export class ArticleService extends BaseClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super();
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:5000";
    }

    search(): Observable<ApiResponse<FileResponse | null>> {
        let url_ = this.baseUrl + "/api/v1/Article/search";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSearch(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSearch(<any>response_);
                } catch (e) {
                    return <Observable<ApiResponse<FileResponse | null>>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApiResponse<FileResponse | null>>><any>_observableThrow(response_);
        }));
    }

    protected processSearch(response: HttpResponseBase): Observable<ApiResponse<FileResponse | null>> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf(new ApiResponse(status, _headers, { fileName: fileName, data: <any>responseBlob, status: status, headers: _headers }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApiResponse<FileResponse | null>>(new ApiResponse(status, _headers, <any>null));
    }
}

@Injectable({
    providedIn: 'root'
})
export class V1Service extends BaseClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super();
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:5000";
    }

    /**
     * 身份校验获取Token
     */
    token(req: LoginReq): Observable<ApiResponse<RespWapperOfString | null>> {
        let url_ = this.baseUrl + "/api/v1/Token";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(req);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processToken(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processToken(<any>response_);
                } catch (e) {
                    return <Observable<ApiResponse<RespWapperOfString | null>>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApiResponse<RespWapperOfString | null>>><any>_observableThrow(response_);
        }));
    }

    protected processToken(response: HttpResponseBase): Observable<ApiResponse<RespWapperOfString | null>> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RespWapperOfString.fromJS(resultData200) : <any>null;
            return _observableOf(new ApiResponse(status, _headers, result200));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApiResponse<RespWapperOfString | null>>(new ApiResponse(status, _headers, <any>null));
    }
}

export class RegisterReq implements IRegisterReq {
    email!: string;
    nickname!: string;
    password!: string;

    constructor(data?: IRegisterReq) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.email = data["email"];
            this.nickname = data["nickname"];
            this.password = data["password"];
        }
    }

    static fromJS(data: any): RegisterReq {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterReq();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["nickname"] = this.nickname;
        data["password"] = this.password;
        return data; 
    }

    clone(): RegisterReq {
        const json = this.toJSON();
        let result = new RegisterReq();
        result.init(json);
        return result;
    }
}

export interface IRegisterReq {
    email: string;
    nickname: string;
    password: string;
}

export class EmailConfirmReq implements IEmailConfirmReq {
    userId!: string;
    code!: string;

    constructor(data?: IEmailConfirmReq) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userId = data["userId"];
            this.code = data["code"];
        }
    }

    static fromJS(data: any): EmailConfirmReq {
        data = typeof data === 'object' ? data : {};
        let result = new EmailConfirmReq();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["code"] = this.code;
        return data; 
    }

    clone(): EmailConfirmReq {
        const json = this.toJSON();
        let result = new EmailConfirmReq();
        result.init(json);
        return result;
    }
}

export interface IEmailConfirmReq {
    userId: string;
    code: string;
}

export class RespWapper implements IRespWapper {
    success!: boolean;
    errors?: ErrorDto[] | undefined;

    constructor(data?: IRespWapper) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.errors) {
                this.errors = [];
                for (let i = 0; i < data.errors.length; i++) {
                    let item = data.errors[i];
                    this.errors[i] = item && !(<any>item).toJSON ? new ErrorDto(item) : <ErrorDto>item;
                }
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.success = data["success"];
            if (data["errors"] && data["errors"].constructor === Array) {
                this.errors = [];
                for (let item of data["errors"])
                    this.errors.push(ErrorDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RespWapper {
        data = typeof data === 'object' ? data : {};
        let result = new RespWapper();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        if (this.errors && this.errors.constructor === Array) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        return data; 
    }

    clone(): RespWapper {
        const json = this.toJSON();
        let result = new RespWapper();
        result.init(json);
        return result;
    }
}

export interface IRespWapper {
    success: boolean;
    errors?: IErrorDto[] | undefined;
}

export class ErrorDto implements IErrorDto {
    code?: string | undefined;
    description?: string | undefined;

    constructor(data?: IErrorDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.code = data["code"];
            this.description = data["description"];
        }
    }

    static fromJS(data: any): ErrorDto {
        data = typeof data === 'object' ? data : {};
        let result = new ErrorDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["description"] = this.description;
        return data; 
    }

    clone(): ErrorDto {
        const json = this.toJSON();
        let result = new ErrorDto();
        result.init(json);
        return result;
    }
}

export interface IErrorDto {
    code?: string | undefined;
    description?: string | undefined;
}

export class LoginReq implements ILoginReq {
    email!: string;
    password!: string;
    rememberMe!: boolean;

    constructor(data?: ILoginReq) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.email = data["email"];
            this.password = data["password"];
            this.rememberMe = data["rememberMe"];
        }
    }

    static fromJS(data: any): LoginReq {
        data = typeof data === 'object' ? data : {};
        let result = new LoginReq();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["password"] = this.password;
        data["rememberMe"] = this.rememberMe;
        return data; 
    }

    clone(): LoginReq {
        const json = this.toJSON();
        let result = new LoginReq();
        result.init(json);
        return result;
    }
}

export interface ILoginReq {
    email: string;
    password: string;
    rememberMe: boolean;
}

export class EntityDtoOfString implements IEntityDtoOfString {
    id?: string | undefined;

    constructor(data?: IEntityDtoOfString) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
        }
    }

    static fromJS(data: any): EntityDtoOfString {
        data = typeof data === 'object' ? data : {};
        let result = new EntityDtoOfString();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data; 
    }

    clone(): EntityDtoOfString {
        const json = this.toJSON();
        let result = new EntityDtoOfString();
        result.init(json);
        return result;
    }
}

export interface IEntityDtoOfString {
    id?: string | undefined;
}

export class EditProfileReq extends EntityDtoOfString implements IEditProfileReq {
    nickname!: string;
    signature?: string | undefined;
    gender!: Gender;
    city?: string | undefined;

    constructor(data?: IEditProfileReq) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.nickname = data["nickname"];
            this.signature = data["signature"];
            this.gender = data["gender"];
            this.city = data["city"];
        }
    }

    static fromJS(data: any): EditProfileReq {
        data = typeof data === 'object' ? data : {};
        let result = new EditProfileReq();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["nickname"] = this.nickname;
        data["signature"] = this.signature;
        data["gender"] = this.gender;
        data["city"] = this.city;
        super.toJSON(data);
        return data; 
    }

    clone(): EditProfileReq {
        const json = this.toJSON();
        let result = new EditProfileReq();
        result.init(json);
        return result;
    }
}

export interface IEditProfileReq extends IEntityDtoOfString {
    nickname: string;
    signature?: string | undefined;
    gender: Gender;
    city?: string | undefined;
}

export enum Gender {
    Male = 0, 
    Female = 1, 
    Secret = -1, 
}

export class RetrievePasswordReq implements IRetrievePasswordReq {
    email!: string;

    constructor(data?: IRetrievePasswordReq) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.email = data["email"];
        }
    }

    static fromJS(data: any): RetrievePasswordReq {
        data = typeof data === 'object' ? data : {};
        let result = new RetrievePasswordReq();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        return data; 
    }

    clone(): RetrievePasswordReq {
        const json = this.toJSON();
        let result = new RetrievePasswordReq();
        result.init(json);
        return result;
    }
}

export interface IRetrievePasswordReq {
    email: string;
}

export class ResetPasswordReq implements IResetPasswordReq {
    userId!: string;
    code!: string;
    password!: string;

    constructor(data?: IResetPasswordReq) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userId = data["userId"];
            this.code = data["code"];
            this.password = data["password"];
        }
    }

    static fromJS(data: any): ResetPasswordReq {
        data = typeof data === 'object' ? data : {};
        let result = new ResetPasswordReq();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["code"] = this.code;
        data["password"] = this.password;
        return data; 
    }

    clone(): ResetPasswordReq {
        const json = this.toJSON();
        let result = new ResetPasswordReq();
        result.init(json);
        return result;
    }
}

export interface IResetPasswordReq {
    userId: string;
    code: string;
    password: string;
}

export class FollowUserReq implements IFollowUserReq {
    targetUserId!: string;

    constructor(data?: IFollowUserReq) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.targetUserId = data["targetUserId"];
        }
    }

    static fromJS(data: any): FollowUserReq {
        data = typeof data === 'object' ? data : {};
        let result = new FollowUserReq();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["targetUserId"] = this.targetUserId;
        return data; 
    }

    clone(): FollowUserReq {
        const json = this.toJSON();
        let result = new FollowUserReq();
        result.init(json);
        return result;
    }
}

export interface IFollowUserReq {
    targetUserId: string;
}

export class UnFollowUserReq implements IUnFollowUserReq {
    targetUserId!: string;

    constructor(data?: IUnFollowUserReq) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.targetUserId = data["targetUserId"];
        }
    }

    static fromJS(data: any): UnFollowUserReq {
        data = typeof data === 'object' ? data : {};
        let result = new UnFollowUserReq();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["targetUserId"] = this.targetUserId;
        return data; 
    }

    clone(): UnFollowUserReq {
        const json = this.toJSON();
        let result = new UnFollowUserReq();
        result.init(json);
        return result;
    }
}

export interface IUnFollowUserReq {
    targetUserId: string;
}

export class RespWapperOfPagingDtoOfListItem extends RespWapper implements IRespWapperOfPagingDtoOfListItem {
    body?: PagingDtoOfListItem | undefined;

    constructor(data?: IRespWapperOfPagingDtoOfListItem) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.body = data["body"] ? PagingDtoOfListItem.fromJS(data["body"]) : <any>undefined;
        }
    }

    static fromJS(data: any): RespWapperOfPagingDtoOfListItem {
        data = typeof data === 'object' ? data : {};
        let result = new RespWapperOfPagingDtoOfListItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["body"] = this.body ? this.body.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }

    clone(): RespWapperOfPagingDtoOfListItem {
        const json = this.toJSON();
        let result = new RespWapperOfPagingDtoOfListItem();
        result.init(json);
        return result;
    }
}

export interface IRespWapperOfPagingDtoOfListItem extends IRespWapper {
    body?: IPagingDtoOfListItem | undefined;
}

export class PagingDtoOfListItem implements IPagingDtoOfListItem {
    totalCount!: number;
    dtos?: ListItem[] | undefined;

    constructor(data?: IPagingDtoOfListItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["dtos"] && data["dtos"].constructor === Array) {
                this.dtos = [];
                for (let item of data["dtos"])
                    this.dtos.push(ListItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagingDtoOfListItem {
        data = typeof data === 'object' ? data : {};
        let result = new PagingDtoOfListItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.dtos && this.dtos.constructor === Array) {
            data["dtos"] = [];
            for (let item of this.dtos)
                data["dtos"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagingDtoOfListItem {
        const json = this.toJSON();
        let result = new PagingDtoOfListItem();
        result.init(json);
        return result;
    }
}

export interface IPagingDtoOfListItem {
    totalCount: number;
    dtos?: ListItem[] | undefined;
}

export class ListItem extends EntityDtoOfString implements IListItem {
    nickname?: string | undefined;
    roleName?: string | undefined;
    email?: string | undefined;
    emailConfirmed!: boolean;
    joinDate!: Date;
    isMuted!: boolean;

    constructor(data?: IListItem) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.nickname = data["nickname"];
            this.roleName = data["roleName"];
            this.email = data["email"];
            this.emailConfirmed = data["emailConfirmed"];
            this.joinDate = data["joinDate"] ? new Date(data["joinDate"].toString()) : <any>undefined;
            this.isMuted = data["isMuted"];
        }
    }

    static fromJS(data: any): ListItem {
        data = typeof data === 'object' ? data : {};
        let result = new ListItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["nickname"] = this.nickname;
        data["roleName"] = this.roleName;
        data["email"] = this.email;
        data["emailConfirmed"] = this.emailConfirmed;
        data["joinDate"] = this.joinDate ? this.joinDate.toISOString() : <any>undefined;
        data["isMuted"] = this.isMuted;
        super.toJSON(data);
        return data; 
    }

    clone(): ListItem {
        const json = this.toJSON();
        let result = new ListItem();
        result.init(json);
        return result;
    }
}

export interface IListItem extends IEntityDtoOfString {
    nickname?: string | undefined;
    roleName?: string | undefined;
    email?: string | undefined;
    emailConfirmed: boolean;
    joinDate: Date;
    isMuted: boolean;
}

export class GrantModeratorReq implements IGrantModeratorReq {
    userId!: string;
    moduleId!: string;

    constructor(data?: IGrantModeratorReq) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userId = data["userId"];
            this.moduleId = data["moduleId"];
        }
    }

    static fromJS(data: any): GrantModeratorReq {
        data = typeof data === 'object' ? data : {};
        let result = new GrantModeratorReq();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["moduleId"] = this.moduleId;
        return data; 
    }

    clone(): GrantModeratorReq {
        const json = this.toJSON();
        let result = new GrantModeratorReq();
        result.init(json);
        return result;
    }
}

export interface IGrantModeratorReq {
    userId: string;
    moduleId: string;
}

export class RespWapperOfString extends RespWapper implements IRespWapperOfString {
    body?: string | undefined;

    constructor(data?: IRespWapperOfString) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.body = data["body"];
        }
    }

    static fromJS(data: any): RespWapperOfString {
        data = typeof data === 'object' ? data : {};
        let result = new RespWapperOfString();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["body"] = this.body;
        super.toJSON(data);
        return data; 
    }

    clone(): RespWapperOfString {
        const json = this.toJSON();
        let result = new RespWapperOfString();
        result.init(json);
        return result;
    }
}

export interface IRespWapperOfString extends IRespWapper {
    body?: string | undefined;
}

export class ApiResponse<TResult> {
    status: number;
    headers: { [key: string]: any; };
    result: TResult;
        
    constructor(status: number, headers: { [key: string]: any; }, result: TResult) 
    {
        this.status = status;
        this.headers = headers;
        this.result = result;
    }
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    return _observableThrow(new SwaggerException(message, status, response, headers, result));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader(); 
            reader.onload = event => { 
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob); 
        }
    });
}